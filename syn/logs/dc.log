
                           Design Compiler Graphical 
                                 DC Ultra (TM)
                                  DFTMAX (TM)
                              Power Compiler (TM)
                                 DesignWare (R)
                                 DC Expert (TM)
                               Design Vision (TM)
                               HDL Compiler (TM)
                               VHDL Compiler (TM)
                                  DFT Compiler
                               Design Compiler(R)

               Version N-2017.09-SP2 for linux64 - Nov 27, 2017 

                    Copyright (c) 1988 - 2017 Synopsys, Inc.
   This software and the associated documentation are proprietary to Synopsys,
 Inc. This software may only be used in accordance with the terms and conditions
 of a written license agreement with Synopsys, Inc. All other use, reproduction,
            or distribution of this software is strictly prohibited.
Initializing...
Initializing gui preferences from file  /home/CC/bbeuster/.synopsys_dv_prefs.tcl
source -echo -verbose ./rm_setup/dc_setup.tcl
source -echo -verbose ./rm_setup/common_setup.tcl
puts "RM-Info: Running script [info script]\n"
RM-Info: Running script /home/CC/bbeuster/Projects/github.com/pbing/J1_WB/syn/rm_setup/common_setup.tcl

##########################################################################################
# Variables common to all reference methodology scripts
# Script: common_setup.tcl
# Version: M-2016.12-SP4 (July 17, 2017)
# Copyright (C) 2007-2017 Synopsys, Inc. All rights reserved.
##########################################################################################
set DESIGN_NAME                   "j1_wb"  ;#  The name of the top-level design
j1_wb
set DESIGN_REF_DATA_PATH          ""  ;#  Absolute path prefix variable for library/design data.
#  Use this variable to prefix the common absolute path  
#  to the common variables defined below.
#  Absolute paths are mandatory for hierarchical 
#  reference methodology flow.
##########################################################################################
# Hierarchical Flow Design Variables
##########################################################################################
set HIERARCHICAL_DESIGNS           "" ;# List of hierarchical block design names "DesignA DesignB" ...
set HIERARCHICAL_CELLS             "" ;# List of hierarchical block cell instance names "u_DesignA u_DesignB" ...
##########################################################################################
# Library Setup Variables
##########################################################################################
# For the following variables, use a blank space to separate multiple entries.
# Example: set TARGET_LIBRARY_FILES "lib1.db lib2.db lib3.db"
set ADDITIONAL_SEARCH_PATH [list scripts 				../rtl 				/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphp_150h 				/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphphvt_150h 				/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphplvt_150h                                ] ;#  Additional search path to be added to the default search path
scripts ../rtl /project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphp_150h /project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphphvt_150h /project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphplvt_150h
set TARGET_LIBRARY_FILES          "tcbn90lphpwc_ccs.db tcbn90lphphvtwc_ccs.db tcbn90lphplvtwc_ccs.db"  ;#  Target technology logical libraries
tcbn90lphpwc_ccs.db tcbn90lphphvtwc_ccs.db tcbn90lphplvtwc_ccs.db
set ADDITIONAL_LINK_LIB_FILES     ""  ;#  Extra link logical libraries not included in TARGET_LIBRARY_FILES
set MIN_LIBRARY_FILES             ""  ;#  List of max min library pairs "max1 min1 max2 min2 max3 min3"...
set MW_REFERENCE_LIB_DIRS         ""  ;#  Milkyway reference libraries (include IC Compiler ILMs here)
set MW_REFERENCE_CONTROL_FILE     ""  ;#  Reference Control file to define the Milkyway reference libs
set TECH_FILE                     ""  ;#  Milkyway technology file
set MAP_FILE                      ""  ;#  Mapping file for TLUplus
set TLUPLUS_MAX_FILE              ""  ;#  Max TLUplus file
set TLUPLUS_MIN_FILE              ""  ;#  Min TLUplus file
set MIN_ROUTING_LAYER            ""   ;# Min routing layer
set MAX_ROUTING_LAYER            ""   ;# Max routing layer
set LIBRARY_DONT_USE_FILE        "dont_use.tcl"   ;# Tcl file with library modifications for dont_use
dont_use.tcl
set LIBRARY_DONT_USE_PRE_COMPILE_LIST ""; #Tcl file for customized don't use list before first compile
set LIBRARY_DONT_USE_PRE_INCR_COMPILE_LIST "";# Tcl file with library modifications for dont_use before incr compile
##########################################################################################
# Multivoltage Common Variables
#
# Define the following multivoltage common variables for the reference methodology scripts 
# for multivoltage flows. 
# Use as few or as many of the following definitions as needed by your design.
##########################################################################################
set PD1                          ""           ;# Name of power domain/voltage area  1
set VA1_COORDINATES              {}           ;# Coordinates for voltage area 1
set MW_POWER_NET1                "VDD1"       ;# Power net for voltage area 1
VDD1
set PD2                          ""           ;# Name of power domain/voltage area  2
set VA2_COORDINATES              {}           ;# Coordinates for voltage area 2
set MW_POWER_NET2                "VDD2"       ;# Power net for voltage area 2
VDD2
set PD3                          ""           ;# Name of power domain/voltage area  3
set VA3_COORDINATES              {}           ;# Coordinates for voltage area 3
set MW_POWER_NET3                "VDD3"       ;# Power net for voltage area 3
VDD3
set PD4                          ""           ;# Name of power domain/voltage area  4
set VA4_COORDINATES              {}           ;# Coordinates for voltage area 4
set MW_POWER_NET4                "VDD4"       ;# Power net for voltage area 4
VDD4
puts "RM-Info: Completed script [info script]\n"
RM-Info: Completed script /home/CC/bbeuster/Projects/github.com/pbing/J1_WB/syn/rm_setup/common_setup.tcl

source -echo -verbose ./rm_setup/dc_setup_filenames.tcl
puts "RM-Info: Running script [info script]\n"
RM-Info: Running script /home/CC/bbeuster/Projects/github.com/pbing/J1_WB/syn/rm_setup/dc_setup_filenames.tcl

#################################################################################
# Design Compiler Reference Methodology Filenames Setup
# Script: dc_setup_filenames.tcl
# Version: M-2016.12-SP4 (July 17, 2017)
# Copyright (C) 2010-2017 Synopsys, Inc. All rights reserved.
#################################################################################
#################################################################################
# Use this file to customize the filenames used in the Design Compiler
# Reference Methodology scripts.  This file is designed to be sourced at the
# beginning of the dc_setup.tcl file after sourcing the common_setup.tcl file.
#
# Note that the variables presented in this file depend on the type of flow
# selected when generating the reference methodology files.
#
# Example.
#    If you set DFT flow as FALSE, you will not see DFT related filename
#    variables in this file.
#
# When reusing this file for different flows or newer release, ensure that
# all the required filename variables are defined.  One way to do this is
# to source the default dc_setup_filenames.tcl file and then override the
# default settings as needed for your design.
#
# The default values are backwards compatible with older
# Design Compiler Reference Methodology releases.
#
# Note: Care should be taken when modifying the names of output files
#       that are used in other scripts or tools.
#################################################################################
#################################################################################
# General Flow Files
#################################################################################
##########################
# Milkyway Library Names #
##########################
set DCRM_MW_LIBRARY_NAME                                ${DESIGN_NAME}_LIB
j1_wb_LIB
set DCRM_FINAL_MW_CEL_NAME                              ${DESIGN_NAME}_DCT
j1_wb_DCT
###############
# Input Files #
###############
set DCRM_RTL_READ_SCRIPT                                ${DESIGN_NAME}.DC.read_design.tcl
j1_wb.DC.read_design.tcl
set DCRM_SDC_INPUT_FILE                                 ${DESIGN_NAME}.sdc
j1_wb.sdc
set DCRM_CONSTRAINTS_INPUT_FILE                         ${DESIGN_NAME}.constraints.tcl
j1_wb.constraints.tcl
###########
# Reports #
###########
set DCRM_CHECK_LIBRARY_REPORT                           ${DESIGN_NAME}.check_library.rpt
j1_wb.check_library.rpt
set DCRM_CONSISTENCY_CHECK_ENV_FILE                     ${DESIGN_NAME}.compile_ultra.env
j1_wb.compile_ultra.env
set DCRM_CHECK_DESIGN_REPORT                            ${DESIGN_NAME}.check_design.rpt
j1_wb.check_design.rpt
set DCRM_ANALYZE_DATAPATH_EXTRACTION_REPORT             ${DESIGN_NAME}.analyze_datapath_extraction.rpt
j1_wb.analyze_datapath_extraction.rpt
set DCRM_FINAL_QOR_REPORT                               ${DESIGN_NAME}.mapped.qor.rpt
j1_wb.mapped.qor.rpt
set DCRM_FINAL_TIMING_REPORT                            ${DESIGN_NAME}.mapped.timing.rpt
j1_wb.mapped.timing.rpt
set DCRM_FINAL_AREA_REPORT                              ${DESIGN_NAME}.mapped.area.rpt
j1_wb.mapped.area.rpt
set DCRM_FINAL_POWER_REPORT                             ${DESIGN_NAME}.mapped.power.rpt
j1_wb.mapped.power.rpt
set DCRM_FINAL_CLOCK_GATING_REPORT                      ${DESIGN_NAME}.mapped.clock_gating.rpt
j1_wb.mapped.clock_gating.rpt
set DCRM_FINAL_SELF_GATING_REPORT                       ${DESIGN_NAME}.mapped.self_gating.rpt
j1_wb.mapped.self_gating.rpt
set DCRM_THRESHOLD_VOLTAGE_GROUP_REPORT                 ${DESIGN_NAME}.mapped.threshold.voltage.group.rpt
j1_wb.mapped.threshold.voltage.group.rpt
set DCRM_INSTANTIATE_CLOCK_GATES_REPORT                 ${DESIGN_NAME}.instatiate_clock_gates.rpt
j1_wb.instatiate_clock_gates.rpt
set DCRM_FINAL_DESIGNWARE_AREA_REPORT                   ${DESIGN_NAME}.mapped.designware_area.rpt
j1_wb.mapped.designware_area.rpt
set DCRM_FINAL_RESOURCES_REPORT                         ${DESIGN_NAME}.mapped.final_resources.rpt
j1_wb.mapped.final_resources.rpt
set DCRM_MULTIBIT_CREATE_REGISTER_BANK_FILE             ${DESIGN_NAME}.register_bank.rpt
j1_wb.register_bank.rpt
set DCRM_MULTIBIT_CREATE_REGISTER_BANK_REPORT           ${DESIGN_NAME}.register_bank_report_file.rpt 
j1_wb.register_bank_report_file.rpt
set DCRM_MULTIBIT_COMPONENTS_REPORT                     ${DESIGN_NAME}.multibit.components.rpt
j1_wb.multibit.components.rpt
set DCRM_MULTIBIT_BANKING_REPORT                        ${DESIGN_NAME}.multibit.banking.rpt
j1_wb.multibit.banking.rpt
################
# Output Files #
################
set DCRM_AUTOREAD_RTL_SCRIPT                            ${DESIGN_NAME}.autoread_rtl.tcl
j1_wb.autoread_rtl.tcl
set DCRM_ELABORATED_DESIGN_DDC_OUTPUT_FILE              ${DESIGN_NAME}.elab.ddc
j1_wb.elab.ddc
set DCRM_COMPILE_ULTRA_DDC_OUTPUT_FILE                  ${DESIGN_NAME}.compile_ultra.ddc
j1_wb.compile_ultra.ddc
set DCRM_FINAL_DDC_OUTPUT_FILE                          ${DESIGN_NAME}.mapped.ddc
j1_wb.mapped.ddc
set DCRM_FINAL_PG_VERILOG_OUTPUT_FILE                   ${DESIGN_NAME}.mapped.pg.v
j1_wb.mapped.pg.v
set DCRM_FINAL_VERILOG_OUTPUT_FILE                      ${DESIGN_NAME}.mapped.v
j1_wb.mapped.v
set DCRM_FINAL_SDC_OUTPUT_FILE                          ${DESIGN_NAME}.mapped.sdc
j1_wb.mapped.sdc
set DCRM_FINAL_DESIGN_ICC2                              ICC2_files
ICC2_files
#################################################################################
# DCT Flow Files
#################################################################################
###################
# DCT Input Files #
###################
set DCRM_DCT_DEF_INPUT_FILE                             ${DESIGN_NAME}.def
j1_wb.def
set DCRM_DCT_FLOORPLAN_INPUT_FILE                       ${DESIGN_NAME}.fp
j1_wb.fp
set DCRM_DCT_PHYSICAL_CONSTRAINTS_INPUT_FILE            ${DESIGN_NAME}.physical_constraints.tcl
j1_wb.physical_constraints.tcl
###############
# DCT Reports #
###############
set DCRM_DCT_PHYSICAL_CONSTRAINTS_REPORT                ${DESIGN_NAME}.physical_constraints.rpt
j1_wb.physical_constraints.rpt
set DCRM_DCT_FINAL_CONGESTION_REPORT                    ${DESIGN_NAME}.mapped.congestion.rpt
j1_wb.mapped.congestion.rpt
set DCRM_DCT_FINAL_CONGESTION_MAP_OUTPUT_FILE           ${DESIGN_NAME}.mapped.congestion_map.png
j1_wb.mapped.congestion_map.png
set DCRM_DCT_FINAL_CONGESTION_MAP_WINDOW_OUTPUT_FILE    ${DESIGN_NAME}.mapped.congestion_map_window.png
j1_wb.mapped.congestion_map_window.png
set DCRM_ANALYZE_RTL_CONGESTION_REPORT_FILE             ${DESIGN_NAME}.analyze_rtl_congetion.rpt
j1_wb.analyze_rtl_congetion.rpt
set DCRM_DCT_FINAL_QOR_SNAPSHOT_FOLDER                  ${DESIGN_NAME}.qor_snapshot
j1_wb.qor_snapshot
set DCRM_DCT_FINAL_QOR_SNAPSHOT_REPORT                  ${DESIGN_NAME}.qor_snapshot.rpt
j1_wb.qor_snapshot.rpt
####################
# DCT Output Files #
####################
set DCRM_DCT_FLOORPLAN_OUTPUT_FILE                      ${DESIGN_NAME}.initial.fp
j1_wb.initial.fp
set DCRM_DCT_FINAL_FLOORPLAN_OUTPUT_FILE                ${DESIGN_NAME}.mapped.fp
j1_wb.mapped.fp
set DCRM_DCT_FINAL_SPEF_OUTPUT_FILE                     ${DESIGN_NAME}.mapped.spef
j1_wb.mapped.spef
set DCRM_DCT_FINAL_SDF_OUTPUT_FILE                      ${DESIGN_NAME}.mapped.sdf
j1_wb.mapped.sdf
#################################################################################
# DFT Flow Files
#################################################################################
###################
# DFT Input Files #
###################
set DCRM_DFT_SIGNAL_SETUP_INPUT_FILE                    ${DESIGN_NAME}.dft_signal_defs.tcl
j1_wb.dft_signal_defs.tcl
set DCRM_DFT_AUTOFIX_CONFIG_INPUT_FILE                  ${DESIGN_NAME}.dft_autofix_config.tcl
j1_wb.dft_autofix_config.tcl
###############
# DFT Reports #
###############
set DCRM_DFT_DRC_CONFIGURED_VERBOSE_REPORT              ${DESIGN_NAME}.dft_drc_configured.rpt
j1_wb.dft_drc_configured.rpt
set DCRM_DFT_SCAN_CONFIGURATION_REPORT                  ${DESIGN_NAME}.scan_config.rpt
j1_wb.scan_config.rpt
set DCRM_DFT_PREVIEW_CONFIGURATION_REPORT               ${DESIGN_NAME}.report_dft_insertion_config.preview_dft.rpt
j1_wb.report_dft_insertion_config.preview_dft.rpt
set DCRM_DFT_PREVIEW_DFT_SUMMARY_REPORT                 ${DESIGN_NAME}.preview_dft_summary.rpt
j1_wb.preview_dft_summary.rpt
set DCRM_DFT_PREVIEW_DFT_ALL_REPORT                     ${DESIGN_NAME}.preview_dft.rpt
j1_wb.preview_dft.rpt
set DCRM_DFT_FINAL_SCAN_PATH_REPORT                     ${DESIGN_NAME}.mapped.scanpath.rpt
j1_wb.mapped.scanpath.rpt
set DCRM_DFT_DRC_FINAL_REPORT                           ${DESIGN_NAME}.mapped.dft_drc_inserted.rpt
j1_wb.mapped.dft_drc_inserted.rpt
set DCRM_DFT_FINAL_SCAN_COMPR_SCAN_PATH_REPORT          ${DESIGN_NAME}.mapped.scanpath.scan_compression.rpt
j1_wb.mapped.scanpath.scan_compression.rpt
set DCRM_DFT_DRC_FINAL_SCAN_COMPR_REPORT                ${DESIGN_NAME}.mapped.dft_drc_inserted.scan_compression.rpt
j1_wb.mapped.dft_drc_inserted.scan_compression.rpt
set DCRM_DFT_FINAL_CHECK_SCAN_DEF_REPORT                ${DESIGN_NAME}.mapped.check_scan_def.rpt
j1_wb.mapped.check_scan_def.rpt
set DCRM_DFT_FINAL_DFT_SIGNALS_REPORT                   ${DESIGN_NAME}.mapped.dft_signals.rpt
j1_wb.mapped.dft_signals.rpt
####################
# DFT Output Files #
####################
set DCRM_DFT_FINAL_SCANDEF_OUTPUT_FILE                  ${DESIGN_NAME}.mapped.scandef
j1_wb.mapped.scandef
set DCRM_DFT_FINAL_EXPANDED_SCANDEF_OUTPUT_FILE         ${DESIGN_NAME}.mapped.expanded.scandef
j1_wb.mapped.expanded.scandef
set DCRM_DFT_FINAL_CTL_OUTPUT_FILE                      ${DESIGN_NAME}.mapped.ctl
j1_wb.mapped.ctl
set DCRM_DFT_FINAL_PROTOCOL_OUTPUT_FILE                 ${DESIGN_NAME}.mapped.scan.spf
j1_wb.mapped.scan.spf
set DCRM_DFT_FINAL_SCAN_COMPR_PROTOCOL_OUTPUT_FILE      ${DESIGN_NAME}.mapped.scancompress.spf
j1_wb.mapped.scancompress.spf
set MVRCRM_RTL_READ_SCRIPT                              ${DESIGN_NAME}.MVRC.read_design.tcl
j1_wb.MVRC.read_design.tcl
set VCLPRM_RTL_READ_SCRIPT                              ${DESIGN_NAME}.VCLP.read_design.tcl
j1_wb.VCLP.read_design.tcl
#################################################################################
# Formality Flow Files
#################################################################################
set DCRM_SVF_OUTPUT_FILE                                ${DESIGN_NAME}.mapped.svf
j1_wb.mapped.svf
set FMRM_RTL_READ_SCRIPT                                ${DESIGN_NAME}.FM.read_design.tcl
j1_wb.FM.read_design.tcl
set FMRM_UNMATCHED_POINTS_REPORT                        ${DESIGN_NAME}.fmv_unmatched_points.rpt
j1_wb.fmv_unmatched_points.rpt
set FMRM_FAILING_SESSION_NAME                           ${DESIGN_NAME}
j1_wb
set FMRM_FAILING_POINTS_REPORT                          ${DESIGN_NAME}.fmv_failing_points.rpt
j1_wb.fmv_failing_points.rpt
set FMRM_ABORTED_POINTS_REPORT                          ${DESIGN_NAME}.fmv_aborted_points.rpt
j1_wb.fmv_aborted_points.rpt
set FMRM_ANALYZE_POINTS_REPORT                          ${DESIGN_NAME}.fmv_analyze_points.rpt
j1_wb.fmv_analyze_points.rpt
puts "RM-Info: Completed script [info script]\n"
RM-Info: Completed script /home/CC/bbeuster/Projects/github.com/pbing/J1_WB/syn/rm_setup/dc_setup_filenames.tcl

puts "RM-Info: Running script [info script]\n"
RM-Info: Running script /home/CC/bbeuster/Projects/github.com/pbing/J1_WB/syn/rm_setup/dc_setup.tcl

#################################################################################
# Design Compiler Reference Methodology Setup for Top-Down Flow
# Script: dc_setup.tcl
# Version: M-2016.12-SP4 (July 17, 2017)
# Copyright (C) 2007-2017 Synopsys, Inc. All rights reserved.
#################################################################################
#################################################################################
# Setup Variables
#
# Modify settings in this section to customize your Design Compiler Reference 
# Methodology run.
# Portions of dc_setup.tcl may be used by other tools so program name checks
# are performed where necessary.
#################################################################################
# The following setting removes new variable info messages from the end of the log file
set_app_var sh_new_variable_message false
false
if {$synopsys_program_name == "dc_shell"}  {

  #################################################################################
  # Design Compiler Setup Variables
  #################################################################################

  # Use the set_host_options command to enable multicore optimization to improve runtime.
  # This feature has special usage and license requirements.  Refer to the 
  # "Support for Multicore Technology" section in the Design Compiler User Guide
  # for multicore usage guidelines.
  # Note: This is a DC Ultra feature and is not supported in DC Expert.

  set_host_options -max_cores 4

  # Change alib_library_analysis_path to point to a central cache of analyzed libraries
  # to save runtime and disk space.  The following setting only reflects the
  # default value and should be changed to a central location for best results.

  set_app_var alib_library_analysis_path /project/design/CCE4600/lib

  # Add any additional Design Compiler variables needed here

}
/project/design/CCE4600/lib
set RTL_SOURCE_FILES  ""      ;# Enter the list of source RTL files if reading from RTL
# The following variables are used by scripts in the rm_dc_scripts folder to direct 
# the location of the output files.
set REPORTS_DIR "reports"
reports
set RESULTS_DIR "results"
results
file mkdir ${REPORTS_DIR}
file mkdir ${RESULTS_DIR}
#set variable OPTIMIZATION_FLOW from following RM+ flows
#High Performance Low Power (hplp)
#High Connectivity (hc)
#Runtime Exploration (rtm_exp)
set OPTIMIZATION_FLOW  "hplp" ;# Specify one flow out of hplp | hc | rtm_exp
hplp
#################################################################################
# Search Path Setup
#
# Set up the search path to find the libraries and design files.
#################################################################################
set_app_var search_path ". ${ADDITIONAL_SEARCH_PATH} $search_path"
. scripts ../rtl /project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphp_150h /project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphphvt_150h /project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphplvt_150h . /cae/synopsys/syn/N-2017.09-SP2/libraries/syn /cae/synopsys/syn/N-2017.09-SP2/minpower/syn /cae/synopsys/syn/N-2017.09-SP2/dw/syn_ver /cae/synopsys/syn/N-2017.09-SP2/dw/sim_ver
#################################################################################
# Library Setup
#
# This section is designed to work with the settings from common_setup.tcl
# without any additional modification.
#################################################################################
# Milkyway variable settings
# Make sure to define the Milkyway library variable
# mw_design_library, it is needed by write_milkyway command
set mw_reference_library ${MW_REFERENCE_LIB_DIRS}
set mw_design_library ${DCRM_MW_LIBRARY_NAME}
j1_wb_LIB
set mw_site_name_mapping { {CORE unit} {Core unit} {core unit} }
 {CORE unit} {Core unit} {core unit} 
# The remainder of the setup below should only be performed in Design Compiler
if {$synopsys_program_name == "dc_shell"}  {

  set_app_var target_library ${TARGET_LIBRARY_FILES}
  set_app_var synthetic_library dw_foundation.sldb

   if { $OPTIMIZATION_FLOW == "hplp" } {
  # Enabling the usage of DesignWare minPower Components requires additional DesignWare-LP license
  # set_app_var synthetic_library "dw_minpower.sldb  dw_foundation.sldb"
   }

  set_app_var link_library "* $target_library $ADDITIONAL_LINK_LIB_FILES $synthetic_library"

  # Set min libraries if they exist
  foreach {max_library min_library} $MIN_LIBRARY_FILES {
    set_min_library $max_library -min_version $min_library
  }

  # Set the variable to use Verilog libraries for Test Design Rule Checking
  # (See dc.tcl for details)

  # set_app_var test_simulation_library <list of Verilog library files>

  if {[shell_is_in_topographical_mode]} {

    # To activate the extended layer mode to support 4095 layers uncomment the extend_mw_layers command 
    # before creating the Milkyway library. The extended layer mode is permanent and cannot be reverted 
    # back to the 255 layer mode once activated.

    # extend_mw_layers

    # Only create new Milkyway design library if it doesn't already exist
    if {![file isdirectory $mw_design_library ]} {
      create_mw_lib   -technology $TECH_FILE                       -mw_reference_library $mw_reference_library                       $mw_design_library
    } else {
      # If Milkyway design library already exists, ensure that it is consistent with specified Milkyway reference libraries
      set_mw_lib_reference $mw_design_library -mw_reference_library $mw_reference_library
    }

    open_mw_lib     $mw_design_library

    check_library > ${REPORTS_DIR}/${DCRM_CHECK_LIBRARY_REPORT}

    set_tlu_plus_files -max_tluplus $TLUPLUS_MAX_FILE                        -min_tluplus $TLUPLUS_MIN_FILE                        -tech2itf_map $MAP_FILE

    check_tlu_plus_files
  }

  #################################################################################
  # Library Modifications
  #
  # Apply library modifications after the libraries are loaded.
  #################################################################################

  if {[file exists [which ${LIBRARY_DONT_USE_FILE}]]} {
    puts "RM-Info: Sourcing script file [which ${LIBRARY_DONT_USE_FILE}]\n"
    source -echo -verbose ${LIBRARY_DONT_USE_FILE}
  }
}
RM-Info: Sourcing script file /home/CC/bbeuster/Projects/github.com/pbing/J1_WB/syn/scripts/dont_use.tcl

# clock cells
set_dont_use [get_lib_cells {tcbn90lphp*/CKB* tcbn90lphp*/CKN*}]
Loading db file '/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphp_150h/tcbn90lphpwc_ccs.db'
Information: Using CCS timing libraries. (TIM-024)
Loading db file '/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphphvt_150h/tcbn90lphphvtwc_ccs.db'
Loading db file '/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphplvt_150h/tcbn90lphplvtwc_ccs.db'
Loading db file '/cae/synopsys/syn/N-2017.09-SP2/libraries/syn/dw_foundation.sldb'
1
1
puts "RM-Info: Completed script [info script]\n"
RM-Info: Completed script /home/CC/bbeuster/Projects/github.com/pbing/J1_WB/syn/rm_setup/dc_setup.tcl

set DFT_COMPILE false
false
#################################################################################
# Design Compiler Reference Methodology Script for Top-Down Flow
# Script: dc.tcl
# Version: M-2016.12-SP4 (July 17, 2017)
# Copyright (C) 2007-2016 Synopsys, Inc. All rights reserved.
#################################################################################
#################################################################################
# Additional Variables
#
# Add any additional variables needed for your flow here.
#################################################################################
################################################################################
# You can enable inference of multibit registers from the buses defined in the RTL.
# The replacement of single-bit cells with multibit library cells occurs during execution 
# of the compile_ultra command. This variable has to be set before reading the RTL
#
# set_app_var hdlin_infer_multibit default_all
#################################################################################
if { $OPTIMIZATION_FLOW == "hplp"} {
 set_app_var hdlin_infer_multibit default_all
}
default_all
# No additional flow variables are being recommended
if {[file exists [which ${LIBRARY_DONT_USE_PRE_COMPILE_LIST}]]} {
  puts "RM-Info: Sourcing script file [which ${LIBRARY_DONT_USE_PRE_COMPILE_LIST}]\n"
  source -echo -verbose $LIBRARY_DONT_USE_PRE_COMPILE_LIST
}
#################################################################################
# Setup for Formality Verification
#################################################################################
# In the event of an inconclusive (or hard) verification, we recommend using
# the set_verification_priority commands provided from the analyze_points command
# in Formality. The set_verification_priority commands target specific
# operators to reduce verification complexity while minimizing QoR impact.
# The set_verification_priority commands should be applied after the design
# is read and elaborated.
# For designs that don't have tight QoR constraints and don't have register retiming,
# you can use the following variable to enable the highest productivity single pass flow.
# This flow modifies the optimizations to make verification easier.
# This variable setting should be applied prior to reading in the RTL for the design.
# set_app_var simplified_verification_mode true
# For more information about facilitating formal verification in the flow, refer
# to the following SolvNet article:
# "Resolving Inconclusive and Hard Verifications in Design Compiler"
# https://solvnet.synopsys.com/retrieve/033140.html
# Define the verification setup file for Formality
set_svf ${RESULTS_DIR}/${DCRM_SVF_OUTPUT_FILE}
1
#################################################################################
# Setup SAIF Name Mapping Database
#
# Include an RTL SAIF for better power optimization and analysis.
#
# saif_map should be issued prior to RTL elaboration to create a name mapping
# database for better annotation.
################################################################################
# saif_map -start
#################################################################################
# Read in the RTL Design
#
# Read in the RTL source files or read in the elaborated design (.ddc).
#################################################################################
puts "RM-Info: Sourcing script file [which ${DCRM_RTL_READ_SCRIPT}]\n"
RM-Info: Sourcing script file /home/CC/bbeuster/Projects/github.com/pbing/J1_WB/syn/scripts/j1_wb.DC.read_design.tcl

source -echo -verbose ${DCRM_RTL_READ_SCRIPT}
# Read design
define_design_lib WORK -path work
1
set_app_var alib_library_analysis_path /project/design/CCE4600/lib/
/project/design/CCE4600/lib/
# short module names
# https://solvnet.synopsys.com/retrieve/029589.html
set_app_var template_naming_style   "%s"
%s
set_app_var template_parameter_style "%s"
%s
#set_app_var hdlin_shorten_long_module_name true
#set_app_var hdlin_module_name_limit 32
set hdlin_force_template_style true
true
analyze -format sverilog         -define NO_MODPORT_EXPRESSIONS     [list types.sv          interfaces.sv          register_file.sv          j1_wb.sv]
Running PRESTO HDLC
Compiling source file ../rtl/types.sv
Warning:  ../rtl/types.sv:2: The package types has already been analyzed. It is being replaced. (VER-26)
Compiling source file ../rtl/interfaces.sv
Compiling source file ../rtl/register_file.sv
Compiling source file ../rtl/j1_wb.sv
Presto compilation completed successfully.
1
#elaborate $DESIGN_NAME -param "dstack_depth => 8, rstack_depth => 8"
#elaborate $DESIGN_NAME -param "dstack_depth => 12, rstack_depth => 12"
#elaborate $DESIGN_NAME -param "dstack_depth => 16, rstack_depth => 16"
#elaborate $DESIGN_NAME -param "dstack_depth => 20, rstack_depth => 20"
#elaborate $DESIGN_NAME -param "dstack_depth => 24, rstack_depth => 24"
#elaborate $DESIGN_NAME -param "dstack_depth => 28, rstack_depth => 28"
elaborate $DESIGN_NAME
Loading db file '/cae/synopsys/syn/N-2017.09-SP2/libraries/syn/gtech.db'
Loading db file '/cae/synopsys/syn/N-2017.09-SP2/libraries/syn/standard.sldb'
  Loading link library 'gtech'
Running PRESTO HDLC
Warning:  ../rtl/j1_wb.sv:155: signed to unsigned conversion occurs. (VER-318)
Warning:  ../rtl/j1_wb.sv:157: signed to unsigned conversion occurs. (VER-318)
Warning:  ../rtl/j1_wb.sv:112: DEFAULT branch of CASE statement cannot be reached. (ELAB-311)

Statistics for case statements in always block at line 95 in file
	'../rtl/j1_wb.sv'
===============================================
|           Line           |  full/ parallel  |
===============================================
|           104            |    user/user     |
|           112            |    auto/auto     |
===============================================

Inferred memory devices in process
	in routine j1_wb line 189 in file
		'../rtl/j1_wb.sv'.
===============================================================================
|    Register Name    |   Type    | Width | Bus | MB | AR | AS | SR | SS | ST |
===============================================================================
|       rsp_reg       | Flip-flop |   5   |  Y  | Y  | Y  | N  | N  | N  | N  |
|       npc_reg       | Flip-flop |  13   |  Y  | Y  | Y  | N  | N  | N  | N  |
|       dsp_reg       | Flip-flop |   5   |  Y  | Y  | Y  | N  | N  | N  | N  |
|       st0_reg       | Flip-flop |  16   |  Y  | Y  | Y  | N  | N  | N  | N  |
===============================================================================

Inferred memory devices in process
	in routine j1_wb line 207 in file
		'../rtl/j1_wb.sv'.
===============================================================================
|    Register Name    |   Type    | Width | Bus | MB | AR | AS | SR | SS | ST |
===============================================================================
|     wb.stb_reg      | Flip-flop |   1   |  N  | N  | Y  | N  | N  | N  | N  |
|     wb.cyc_reg      | Flip-flop |   1   |  N  | N  | Y  | N  | N  | N  | N  |
===============================================================================

Inferred memory devices in process
	in routine j1_wb line 219 in file
		'../rtl/j1_wb.sv'.
===============================================================================
|    Register Name    |   Type    | Width | Bus | MB | AR | AS | SR | SS | ST |
===============================================================================
|     is_ld_r_reg     | Flip-flop |   1   |  N  | N  | Y  | N  | N  | N  | N  |
===============================================================================

Inferred memory devices in process
	in routine j1_wb line 228 in file
		'../rtl/j1_wb.sv'.
===============================================================================
|    Register Name    |   Type    | Width | Bus | MB | AR | AS | SR | SS | ST |
===============================================================================
|     is_st_r_reg     | Flip-flop |   1   |  N  | N  | Y  | N  | N  | N  | N  |
===============================================================================
Presto compilation completed successfully.
Elaborated 1 design.
Current design is now 'j1_wb'.
Information: Building the design 'register_file' instantiated from design 'j1_wb' with
	the parameters "32". (HDL-193)

Inferred memory devices in process
	in routine register_file line 16 in file
		'../rtl/register_file.sv'.
===============================================================================
|    Register Name    |   Type    | Width | Bus | MB | AR | AS | SR | SS | ST |
===============================================================================
|       mem_reg       | Flip-flop |  512  |  Y  | Y  | N  | N  | N  | N  | N  |
===============================================================================
Statistics for MUX_OPs
======================================================
| block name/line  | Inputs | Outputs | # sel inputs |
======================================================
| register_file/20 |   32   |   16    |      5       |
======================================================
Presto compilation completed successfully.
Warning: Design 'register_file' was renamed to 'register_file_1' to avoid
	a conflict with another design that has the same name but
different parameters. (LINK-17)
1
1
# OR
# You can read an elaborated design from the same release.
# Using an elaborated design from an older release will not give the best results.
# read_ddc ${DCRM_ELABORATED_DESIGN_DDC_OUTPUT_FILE}
current_design ${DESIGN_NAME}
Current design is 'j1_wb'.
{j1_wb}
link

  Linking design 'j1_wb'
  Using the following designs and libraries:
  --------------------------------------------------------------------------
  * (2 designs)               /home/CC/bbeuster/Projects/github.com/pbing/J1_WB/syn/j1_wb.db, etc
  tcbn90lphpwc_ccs (library)  /project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphp_150h/tcbn90lphpwc_ccs.db
  tcbn90lphphvtwc_ccs (library) /project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphphvt_150h/tcbn90lphphvtwc_ccs.db
  tcbn90lphplvtwc_ccs (library) /project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphplvt_150h/tcbn90lphplvtwc_ccs.db
  dw_foundation.sldb (library) /cae/synopsys/syn/N-2017.09-SP2/libraries/syn/dw_foundation.sldb

1
write -hierarchy -format ddc -output ${RESULTS_DIR}/${DCRM_ELABORATED_DESIGN_DDC_OUTPUT_FILE}
Writing ddc file 'results/j1_wb.elab.ddc'.
1
#################################################################################
# sets the multibit_mode attribute
#################################################################################
if { $OPTIMIZATION_FLOW == "hplp"} {
  # Enable mapping to multibit only if the timing is not degraded.
  set_multibit_options -mode timing_driven
}
1
#################################################################################
# Reports pre-synthesis congestion analysis.
#################################################################################
if { $OPTIMIZATION_FLOW == "hc"} {
  #Analyze the RTL constructs which may lead to congestion
  analyze_rtl_congestion > ${REPORTS_DIR}/${DCRM_ANALYZE_RTL_CONGESTION_REPORT_FILE}
}
#################################################################################
# Apply Logical Design Constraints
#################################################################################
# You can use either SDC file ${DCRM_SDC_INPUT_FILE} or Tcl file 
# ${DCRM_CONSTRAINTS_INPUT_FILE} to constrain your design.
if {[file exists [which ${DCRM_SDC_INPUT_FILE}]]} {
  puts "RM-Info: Reading SDC file [which ${DCRM_SDC_INPUT_FILE}]\n"
  read_sdc ${DCRM_SDC_INPUT_FILE}
}
Warning: File 'j1_wb.sdc' was not found in search path. (CMD-030)
if {[file exists [which ${DCRM_CONSTRAINTS_INPUT_FILE}]]} {
  puts "RM-Info: Sourcing script file [which ${DCRM_CONSTRAINTS_INPUT_FILE}]\n"
  source -echo -verbose ${DCRM_CONSTRAINTS_INPUT_FILE}
}
RM-Info: Sourcing script file /home/CC/bbeuster/Projects/github.com/pbing/J1_WB/syn/scripts/j1_wb.constraints.tcl

# Constraints
set clk_period [expr 1.0e9/120.0e6]
8.33333333333
create_clock -period $clk_period [get_ports clk]
1
set_input_delay  -clock [get_clocks clk] 1.0 [remove_from_collection [all_inputs] [get_ports {clk wb.dat_s}]]
1
set_input_delay  -clock [get_clocks clk] 7.33 [get_ports wb.dat_s]
1
set_output_delay -clock [get_clocks clk] 0.0 [all_outputs]
1
1
if {![shell_is_in_topographical_mode]} {
    set_wire_load_selection WireAreaLowkCon
}
1
# You can enable analysis and optimization for multiple clocks per register.
# To use this, you must constrain to remove false interactions between mutually exclusive
# clocks.  This is needed to prevent unnecessary analysis that can result in
# a significant runtime increase with this feature enabled.
#
# set_clock_groups -physically_exclusive | -logically_exclusive | -asynchronous #                  -group {CLKA, CLKB} -group {CLKC, CLKD} 
#
# set_app_var timing_enable_multiple_clocks_per_reg true
#################################################################################
# Apply The Operating Conditions
#################################################################################
# Set operating condition on top level
# set_operating_conditions -max <max_opcond> -min <min_opcond>
#################################################################################
# Create Default Path Groups
#
# Separating these paths can help improve optimization.
# Remove these path group settings if user path groups have already been defined.
#################################################################################
set ports_clock_root [filter_collection [get_attribute [get_clocks] sources] object_class==port]
{clk}
group_path -name REGOUT -to [all_outputs] 
1
group_path -name REGIN -from [remove_from_collection [all_inputs] ${ports_clock_root}] 
1
group_path -name FEEDTHROUGH -from [remove_from_collection [all_inputs] ${ports_clock_root}] -to [all_outputs]
1
#################################################################################
# Power Optimization Section
#################################################################################
#############################################################################
# Clock Gating Setup
#############################################################################
# If your design has instantiated clock gates, you should use identify_clock_gating
# command to identify and the report_clock_gating -multi_stage to report them.
# identify_clock_gating
# report_clock_gating -multi_stage -nosplit > ${REPORTS_DIR}/${DCRM_INSTANTIATE_CLOCK_GATES_REPORT}
# If you do not want clock-gating to optimize your user instantiated
# clock-gating cells, you should set the pwr_preserve_cg attribute upon
# those clock-gating cells.
# set_preserve_clock_gate [get_cell <user_clock_gating_cells>]
# Default clock_gating_style suits most designs.  Change only if necessary.
# set_clock_gating_style -positive_edge_logic {integrated} -negative_edge_logic {integrated} -control_point before ...   
# Clock gate insertion is now performed during compile_ultra -gate_clock
# so insert_clock_gating is no longer recommended at this step.
# The following setting can be used to enable global clock gating.
# With global clock gating, common enables are extracted across hierarchies
# which results in fewer redundant clock gates. 
# set compile_clock_gating_through_hierarchy true 
# For better timing optimization of enable logic, clock latency for 
# clock gating cells can be optionally specified.
# set_clock_gate_latency -clock <clock_name> -stage <stage_num>     #         -fanout_latency {fanout_range1 latency_val1 fanout_range2 latency_val2 ...}
# You can use "set_self_gating_options" command to specify self-gating 
# options when -self_gating option is used in addition to -gate_clock 
# option at the compile_ultra command. To inserts self-gate on clock-gated
# registers, uncomment the following line:
# set_self_gating_options -interaction_with_clock_gating insert
#############################################################################
# Apply Power Optimization Constraints
#############################################################################
# Include a SAIF file, if possible, for power optimization.  If a SAIF file
# is not provided, the default toggle rate of 0.1 will be used for propagating
# switching activity.
# read_saif -auto_map_names -input ${DESIGN_NAME}.saif -instance < DESIGN_INSTANCE > -verbose
if {[shell_is_in_topographical_mode]} {
      # For multi-Vth design, replace the following to set the threshold voltage groups in the libraries.

      # set_attribute <my_hvt_lib> default_threshold_voltage_group HVT -type string
      # set_attribute <my_lvt_lib> default_threshold_voltage_group LVT -type string
    }
# Starting in J-2014.09, leakage optimization is the default flow and is always enabled.
if {[shell_is_in_topographical_mode]} {
      # Use the following command to enable power prediction using clock tree estimation.

      # set_power_prediction true -ct_references <LIB CELL LIST>
    }
if {[shell_is_in_topographical_mode]} {

  ##################################################################################
  # Apply Physical Design Constraints
  #
  # Optional: Floorplan information can be read in here if available.
  # This is highly recommended for irregular floorplans.
  #
  # Floorplan constraints can be provided from one of the following sources:
  # * extract_physical_constraints with a DEF file
  #	* read_floorplan with a floorplan file (written by write_floorplan)
  #	* User generated Tcl physical constraints
  #
  ##################################################################################

  # Specify ignored layers for routing to improve correlation
  # Use the same ignored layers that will be used during place and route

  if { ${MIN_ROUTING_LAYER} != ""} {
    set_ignored_layers -min_routing_layer ${MIN_ROUTING_LAYER}
  }
  if { ${MAX_ROUTING_LAYER} != ""} {
    set_ignored_layers -max_routing_layer ${MAX_ROUTING_LAYER}
  }

  report_ignored_layers

  # If the macro names change after mapping and writing out the design due to
  # ungrouping or Verilog change_names renaming, it may be necessary to translate 
  # the names to correspond to the cell names that exist before compile.

  # During DEF constraint extraction, extract_physical_constraints automatically
  # matches DEF names back to precompile names in memory using standard matching rules.
  # read_floorplan will also automatically perform this name matching.

  # Modify set_query_rules if other characters are used for hierarchy separators
  # or bus names. 

  # set_query_rules  -hierarchical_separators {/ _ .}   #                  -bus_name_notations {[] __ ()}     #                  -class {cell pin port net}         #                  -wildcard                          #                  -regsub_cumulative                 #                  -show

  ## For DEF floorplan input

  # The DEF file for Design Compiler Topographical can be written from IC Compiler using the following 
  # recommended options:
  # icc_shell> write_def -version 5.7 -rows_tracks_gcells -fixed -pins -blockages -specialnets   #                      -vias -regions_groups -verbose -output ${DCRM_DCT_DEF_INPUT_FILE}

  if {[file exists [which ${DCRM_DCT_DEF_INPUT_FILE}]]} {
    # If you have physical only cells as a part of your floorplan DEF file, you can use
    # the -allow_physical_cells option with extract_physical_constraints to include
    # the physical only cells as a part of the floorplan in Design Compiler to improve correlation.
    #
    # Note: With -allow_physical_cells, new logical cells in the DEF file
    #       that have a fixed location will also be added to the design in memory.
    #       See the extract_physical_constraints manpage for more information about
    #       identifying the cells added to the design when using -allow_physical_cells.
  
    # extract_physical_constraints -allow_physical_cells ${DCRM_DCT_DEF_INPUT_FILE}

    puts "RM-Info: Reading in DEF file [which ${DCRM_DCT_DEF_INPUT_FILE}]\n"
    extract_physical_constraints ${DCRM_DCT_DEF_INPUT_FILE}
    if { $OPTIMIZATION_FLOW == "hplp"} {
	extract_physical_constraints -allow_physical_cells ${DCRM_DCT_DEF_INPUT_FILE}  
    }
  }
  
  # OR

  ## For floorplan file input

  # The floorplan file for Design Compiler Topographical can be written from IC Compiler using the following 
  # recommended options:
  # Note: IC Compiler requires the use of -placement {terminal} with -create_terminal beginning in the
  #       D-2010.03-SP1 release.
  # icc_shell> write_floorplan -placement {io terminal hard_macro soft_macro} -create_terminal   #                            -row -create_bound -preroute -track ${DCRM_DCT_FLOORPLAN_INPUT_FILE}

  # Read in the secondary floorplan file, previously written by write_floorplan in Design Compiler,
  # to restore physical-only objects back to the design, before reading the main floorplan file.

  if {[file exists [which ${DCRM_DCT_FLOORPLAN_INPUT_FILE}.objects]]} {
    puts "RM-Info: Reading in secondary floorplan file [which ${DCRM_DCT_FLOORPLAN_INPUT_FILE}.objects]\n"
    read_floorplan ${DCRM_DCT_FLOORPLAN_INPUT_FILE}.objects
  }

  if {[file exists [which ${DCRM_DCT_FLOORPLAN_INPUT_FILE}]]} {
    puts "RM-Info: Reading in floorplan file [which ${DCRM_DCT_FLOORPLAN_INPUT_FILE}]\n"
    read_floorplan ${DCRM_DCT_FLOORPLAN_INPUT_FILE}
  }

  # OR

  ## For Tcl file input

  # For Tcl constraints, the name matching feature must be explicitly enabled
  # and will also use the set_query_rules setttings. This should be turned off
  # after the constraint read in order to minimize runtime.

  if {[file exists [which ${DCRM_DCT_PHYSICAL_CONSTRAINTS_INPUT_FILE}]]} {
    set_app_var enable_rule_based_query true
    puts "RM-Info: Sourcing script file [which ${DCRM_DCT_PHYSICAL_CONSTRAINTS_INPUT_FILE}]\n"
    source -echo -verbose ${DCRM_DCT_PHYSICAL_CONSTRAINTS_INPUT_FILE}
    set_app_var enable_rule_based_query false 
  }


  # Use write_floorplan to save the applied floorplan.

  # Note: A secondary floorplan file ${DCRM_DCT_FLOORPLAN_OUTPUT_FILE}.objects
  #       might also be written to capture physical-only objects in the design.
  #       This file should be read in before reading the main floorplan file.

  write_floorplan -all ${RESULTS_DIR}/${DCRM_DCT_FLOORPLAN_OUTPUT_FILE}

  # Verify that all the desired physical constraints have been applied
  # Add the -pre_route option to include pre-routes in the report
  report_physical_constraints > ${REPORTS_DIR}/${DCRM_DCT_PHYSICAL_CONSTRAINTS_REPORT}
}
#################################################################################
# Apply Additional Optimization Constraints
#################################################################################
# Prevent assignment statements in the Verilog netlist.
set_fix_multiple_port_nets -all -buffer_constants
1
#################################################################################
# Save the compile environment snapshot for the Consistency Checker utility.
#
# This utility checks for inconsistent settings between Design Compiler and
# IC Compiler which can contribute to correlation mismatches.
#
# Download this utility from SolvNet.  See the following SolvNet article for
# complete details:
#
# https://solvnet.synopsys.com/retrieve/026366.html
#
# The article is titled: "Using the Consistency Checker to Automatically Compare
# Environment Settings Between Design Compiler and IC Compiler"
#################################################################################
# Uncomment the following to snapshot the environment for the Consistency Checker
# write_environment -consistency -output ${REPORTS_DIR}/${DCRM_CONSISTENCY_CHECK_ENV_FILE}
#################################################################################
# Check for Design Problems 
#################################################################################
# Check the current design for consistency
check_design -summary
 
****************************************
check_design summary:
Version:     N-2017.09-SP2
Date:        Thu Dec 14 13:25:15 2017
****************************************

                   Name                                            Total
--------------------------------------------------------------------------------
Inputs/Outputs                                                      4
    Unconnected ports (LINT-28)                                     3
    Constant outputs (LINT-52)                                      1

Cells                                                              12
    Cells do not drive (LINT-1)                                    12
--------------------------------------------------------------------------------

Information: Use the 'check_design' command for 
	 more information about warnings. (LINT-98)

1
check_design > ${REPORTS_DIR}/${DCRM_CHECK_DESIGN_REPORT}
# The analyze_datapath_extraction command can help you to analyze why certain data 
# paths are no extracted, uncomment the following line to report analyisis.
# analyze_datapath_extraction > ${REPORTS_DIR}/${DCRM_ANALYZE_DATAPATH_EXTRACTION_REPORT}
#################################################################################
# Multibit Register Reports pre-compile_ultra
#################################################################################
#################################################################################
# Uncomment the next line to verify that the desired bussed registers are grouped as multibit components 
# These multibit components are mapped to multibit registers during compile_ultra
#
redirect ${REPORTS_DIR}/${DCRM_MULTIBIT_COMPONENTS_REPORT} {report_multibit -hierarchical }
#################################################################################
#################################################################################
# Compile the Design
#
# Recommended Options:
#
#     -scan
#     -gate_clock (-self_gating)
#     -retime
#     -spg
#
# Use compile_ultra as your starting point. For test-ready compile, include
# the -scan option with the first compile and any subsequent compiles.
#
# Use -gate_clock to insert clock-gating logic during optimization.  This
# is now the recommended methodology for clock gating.
#
# Use -self_gating option in addition to -gate_clock for potentially saving 
# additional dynamic power, in topographical mode only. Registers that are 
# not clock gated will be considered for XOR self gating.
# XOR self gating should be performed along with clock gating, using -gate_clock
# and -self_gating options. XOR self gates will be inserted only if there is 
# potential power saving without degrading the timing.
# An accurate switching activity annotation either by reading in a saif 
# file or through set_switching_activity command is recommended.
# You can use "set_self_gating_options" command to specify self-gating 
# options.
#
# Use -retime to enable adaptive retiming optimization for further timing benefit.
#
# Use the -spg option to enable Design Compiler Graphical physical guidance flow.
# The physical guidance flow improves QoR, area and timing correlation, and congestion.
# It also improves place_opt runtime in IC Compiler.
#
# Note: In addition to -spg option you can enable the support of via resistance for 
#       RC estimation to improve the timing correlation with IC Compiler by using the 
#       following setting:
#
#       set_app_var spg_enable_via_resistance_support true
#
# You can selectively enable or disable the congestion optimization on parts of 
# the design by using the set_congestion_optimization command.
# This option requires a license for Design Compiler Graphical.
#
# The constant propagation is enabled when boundary optimization is disabled. In 
# order to stop constant propagation you can do the following
#
# set_compile_directives -constant_propagation false <object_list>
#
# Note: Layer optimization is on by default in Design Compiler Graphical, to 
#       improve the the accuracy of certain net delay during optimization.
#       To disable the the automatic layer optimization you can use the 
#       -no_auto_layer_optimization option.
#
#################################################################################
## RM+ Variable and Command Settings before first compile_ultra
#################################################################################
if { $OPTIMIZATION_FLOW == "hplp"} {
    if {[shell_is_in_topographical_mode]} {

	# The following variable, when set to true, runs additional optimizations to improve the timing of  
	# the design at the cost of additional run time.
	set_app_var compile_timing_high_effort true

	# The following variable enables a mode of coarse placement in which cells are not distributed  
	# evenly  across the surface but are allowed to clump together for better QoR     
	set_app_var placer_max_cell_density_threshold 0.75        

	# The following variable, when set to true, enables very high effort optimization to fix total negative slack 
	# Setting following variable to true may affect run time
	set_app_var psynopt_tns_high_effort true

	# Use the following variable to enable the physically aware clock gating 
	set_app_var power_cg_physically_aware_cg true
	
	#The following variable helps to reduce the total negative slack of the design
	set_app_var placer_tns_driven true

	# Enable low power placement.  
	# Low power placement affects the placement of cells, pulls them closer together, 
	# on nets with high switching activity to reduce the overall dynamic power of your design.  
        set_app_var power_low_power_placement true

        # In MCMM flow use set_scenario_options -dynamic_power true 
	set_dynamic_optimization true
	
	# The following variable enables register replication across the hierarchy by creating new ports
	# on the instances of the subdesigns if it is necessary to improve the timing of the design
	set_app_var compile_register_replication_across_hierarchy true 
    }
}
if { $OPTIMIZATION_FLOW == "hc"} {
   if {[shell_is_in_topographical_mode]} {

       # This command enables congestion aware Global buffering based on Zroutebased estimation,
       # reducing congestion along narrow channels across macros. Enabling this feature may have 
       # runtime and QOR impact. Enable this variable on macro intensive designs with narrow channels.
       # set_ahfs_options -global_route true


       # With the following variables set, Zroute-based congestion-driven placement is enabled
       # instead of virtual route based estimation. 
       # Enabling this feature may have runtime impact. Enable this for highly congested designs
       # set_app_var placer_congestion_effort medium
       # set_app_var placer_enable_enhanced_router true

       # Enabling the variable can lead to lower congestion for designs that have congestion due to
       # multiplexing logic in the RTL. This variable is supported only in the initial compile step,
       # Not supported in incremental compile.
       set_app_var compile_prefer_mux true
   }
}
if { $OPTIMIZATION_FLOW == "rtm_exp"} {
  if {[shell_is_in_topographical_mode]} {
  
      set_host_options -max_cores 8
      # The following command overrides runtime-intensive user settings with settings designed
      # to improve runtime. Since the run time intensive optimizations are turned off it might 
      # impact QoR. You can use this as an exploration flow when run time is a concern.
      compile_prefer_runtime
  }
}
if {[shell_is_in_topographical_mode]} {
  # Use the "-check_only" option of "compile_ultra" to verify that your
  # libraries and design are complete and that optimization will not fail
  # in topographical mode.  Use the same options as will be used in compile_ultra.

  # compile_ultra -scan -gate_clock -check_only
}
compile_ultra -scan -gate_clock
Information: Performing power optimization. (PWR-850)
Alib files are up-to-date.
Information: Running optimization using a maximum of 4 cores. (OPT-1500)
Information: Choosing a test methodology will restrict the optimization of sequential cells. (UIO-12)
Information: Evaluating DesignWare library utilization. (UISN-27)

============================================================================
| DesignWare Building Block Library  |         Version         | Available |
============================================================================
| Basic DW Building Blocks           | N-2017.09-DWBB_201709.2 |     *     |
| Licensed DW Building Blocks        | N-2017.09-DWBB_201709.2 |     *     |
============================================================================

Information: Sequential output inversion is enabled.  SVF file must be used for formal verification. (OPT-1208)

Information: There are 16 potential problems in your design. Please run 'check_design' for more information. (LINT-99)

Information: Uniquified 2 instances of design 'register_file_1'. (OPT-1056)
  Simplifying Design 'j1_wb'

Loaded alib file '/project/design/CCE4600/lib/alib-52/tcbn90lphpwc_ccs.db.alib' (placeholder)
Loaded alib file '/project/design/CCE4600/lib/alib-52/tcbn90lphphvtwc_ccs.db.alib'
Loaded alib file '/project/design/CCE4600/lib/alib-52/tcbn90lphplvtwc_ccs.db.alib' (placeholder)
  Building model 'DW01_NAND2'
Information: Ungrouping hierarchy dstack before Pass 1 (OPT-776)
Information: Ungrouping hierarchy rstack before Pass 1 (OPT-776)
Information: Ungrouping 2 of 68 hierarchies before Pass 1 (OPT-775)
Information: State dependent leakage is now switched from on to off.

  Beginning Pass 1 Mapping
  ------------------------
  Processing 'j1_wb'
Information: Added key list 'DesignWare' to design 'j1_wb'. (DDB-72)
Information: In design 'j1_wb', the register 'wb.stb_reg' is removed because it is merged to 'wb.cyc_reg'. (OPT-1215)
 Implement Synthetic for 'j1_wb'.
  Processing 'SNPS_CLOCK_GATE_HIGH_register_file_1_0_0'
  Mapping integrated clock gating circuitry
  Processing 'SNPS_CLOCK_GATE_HIGH_register_file_1_1_0'
  Mapping integrated clock gating circuitry
  Processing 'SNPS_CLOCK_GATE_HIGH_j1_wb'
  Mapping integrated clock gating circuitry

  Updating timing information
Information: Updating design information... (UID-85)
Information: The library cell 'TIEL' in the library 'tcbn90lphpwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIEH' in the library 'tcbn90lphpwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIELHVT' in the library 'tcbn90lphphvtwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIEHHVT' in the library 'tcbn90lphphvtwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIELLVT' in the library 'tcbn90lphplvtwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIEHLVT' in the library 'tcbn90lphplvtwc_ccs' is not characterized for internal power. (PWR-536)
Information: The target library(s) contains cell(s), other than black boxes, that are not characterized for internal power. (PWR-24)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_j1_wb, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_31, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_31, since there are no registers. (PWR-806)
Information: Skipping clock gating on design j1_wb_RSOP_64, since there are no registers. (PWR-806)
Information: Skipping clock gating on design j1_wb_DW01_inc_J1_0, since there are no registers. (PWR-806)
Information: Skipping clock gating on design j1_wb_DW01_inc_J1_1, since there are no registers. (PWR-806)
Information: Skipping clock gating on design j1_wb_DW01_inc_J1_2, since there are no registers. (PWR-806)
Information: Skipping clock gating on design j1_wb_DP_OP_69J1_122_3017_J1_0, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_0, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_1, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_2, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_3, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_4, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_5, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_6, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_7, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_8, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_9, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_10, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_11, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_12, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_13, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_14, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_15, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_16, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_17, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_18, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_19, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_20, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_21, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_22, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_23, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_24, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_25, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_26, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_27, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_28, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_29, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_0_30, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_0, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_1, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_2, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_3, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_4, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_5, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_6, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_7, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_8, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_9, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_10, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_11, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_12, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_13, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_14, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_15, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_16, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_17, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_18, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_19, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_20, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_21, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_22, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_23, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_24, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_25, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_26, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_27, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_28, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_29, since there are no registers. (PWR-806)
Information: Skipping clock gating on design SNPS_CLOCK_GATE_HIGH_register_file_1_1_30, since there are no registers. (PWR-806)
Information: Performing clock-gating on design j1_wb. (PWR-730)
Information: Automatic shift-register identification is enabled for scan. Not all registers will be scan-replaced. (OPT-467)

  Beginning Mapping Optimizations  (Ultra High effort)
  -------------------------------
  Mapping Optimization (Phase 1)
  Mapping Optimization (Phase 2)
  Mapping Optimization (Phase 3)
  Mapping Optimization (Phase 4)
  Mapping Optimization (Phase 5)
  Mapping Optimization (Phase 6)

  Beginning Constant Register Removal
  -----------------------------------

  Beginning Global Optimizations
  ------------------------------
  Numerical Synthesis (Phase 1)
  Numerical Synthesis (Phase 2)
  Global Optimization (Phase 1)
  Global Optimization (Phase 2)
  Global Optimization (Phase 3)
  Global Optimization (Phase 4)
  Global Optimization (Phase 5)
  Global Optimization (Phase 6)
  Global Optimization (Phase 7)
  Global Optimization (Phase 8)
  Global Optimization (Phase 9)
  Global Optimization (Phase 10)
  Global Optimization (Phase 11)
  Global Optimization (Phase 12)
  Global Optimization (Phase 13)
  Global Optimization (Phase 14)
  Global Optimization (Phase 15)
  Global Optimization (Phase 16)
  Global Optimization (Phase 17)
  Global Optimization (Phase 18)
  Global Optimization (Phase 19)
  Global Optimization (Phase 20)
  Global Optimization (Phase 21)
  Global Optimization (Phase 22)
  Global Optimization (Phase 23)
  Global Optimization (Phase 24)
  Global Optimization (Phase 25)
  Global Optimization (Phase 26)
  Global Optimization (Phase 27)
  Global Optimization (Phase 28)
  Global Optimization (Phase 29)
  Global Optimization (Phase 30)
  Global Optimization (Phase 31)

  Beginning Isolate Ports
  -----------------------

  Beginning Delay Optimization
  ----------------------------

                                  TOTAL                                                
   ELAPSED            WORST NEG   SETUP    DESIGN                              LEAKAGE 
    TIME      AREA      SLACK     COST    RULE COST         ENDPOINT            POWER  
  --------- --------- --------- --------- --------- ------------------------- ---------
    0:00:39   25791.1      1.07      91.1       0.1                           5890.6636
    0:00:41   28302.3      0.05       4.5       0.2                           9122.3545
    0:00:41   28302.3      0.05       4.5       0.2                           9122.3545
    0:00:43   28302.3      0.06       4.6       0.2                           9088.7432
    0:00:45   28304.4      0.06       4.7       0.2                           9104.7607
    0:00:46   28304.4      0.06       4.8       0.2                           9104.7607

  Beginning WLM Backend Optimization
  --------------------------------------
    0:00:48   28196.5      0.05       3.2       0.2                           8576.9277
    0:00:49   28154.1      0.05       3.4       0.1                           7673.1519
    0:00:49   28154.1      0.05       3.4       0.1                           7673.1519
    0:00:50   28874.6      0.04       2.7       0.1                           8598.7910
    0:00:50   28874.6      0.04       2.7       0.1                           8598.7910
    0:00:50   28936.0      0.03       2.5       0.1                           8717.4600
    0:00:50   28936.0      0.03       2.5       0.1                           8717.4600
    0:00:52   29829.9      0.02       1.0       1.0                           9701.5586
    0:00:52   29829.9      0.02       1.0       1.0                           9701.5586
    0:00:52   29921.7      0.00       0.0       1.0                           9893.7275
    0:00:52   29921.7      0.00       0.0       1.0                           9893.7275
    0:00:52   29921.7      0.00       0.0       1.0                           9893.7275
    0:00:52   29921.7      0.00       0.0       1.0                           9893.7275
    0:00:52   29921.7      0.00       0.0       1.0                           9893.7275
    0:00:52   29921.7      0.00       0.0       1.0                           9893.7275
    0:00:52   29921.7      0.00       0.0       1.0                           9893.7275
    0:00:52   29921.7      0.00       0.0       1.0                           9893.7275
    0:00:52   29921.7      0.00       0.0       1.0                           9893.7275
    0:00:52   29921.7      0.00       0.0       1.0                           9893.7275
    0:00:52   29921.7      0.00       0.0       1.0                           9893.7275


  Beginning Design Rule Fixing  (max_transition)  (max_capacitance)
  ----------------------------

                                  TOTAL                                                
   ELAPSED            WORST NEG   SETUP    DESIGN                              LEAKAGE 
    TIME      AREA      SLACK     COST    RULE COST         ENDPOINT            POWER  
  --------- --------- --------- --------- --------- ------------------------- ---------
    0:00:52   29921.7      0.00       0.0       1.0                           9893.7275
  Global Optimization (Phase 32)
  Global Optimization (Phase 33)
  Global Optimization (Phase 34)
    0:00:53   29777.7      0.00       0.0       0.0                           9663.6367
    0:00:53   29777.7      0.00       0.0       0.0                           9664.5293


  Beginning Leakage Power Optimization  (max_leakage_power 0)
  ------------------------------------

                                  TOTAL                                                
   ELAPSED            WORST NEG   SETUP    DESIGN                              LEAKAGE 
    TIME      AREA      SLACK     COST    RULE COST         ENDPOINT            POWER  
  --------- --------- --------- --------- --------- ------------------------- ---------
    0:00:53   29777.7      0.00       0.0       0.0                           9664.5293
  Global Optimization (Phase 35)
  Global Optimization (Phase 36)
  Global Optimization (Phase 37)
  Global Optimization (Phase 38)
  Global Optimization (Phase 39)
  Global Optimization (Phase 40)
  Global Optimization (Phase 41)
  Global Optimization (Phase 42)
  Global Optimization (Phase 43)
  Global Optimization (Phase 44)
  Global Optimization (Phase 45)
  Global Optimization (Phase 46)
  Global Optimization (Phase 47)
  Global Optimization (Phase 48)
  Global Optimization (Phase 49)
    0:00:55   28982.5      0.02       2.0       0.0 st0_reg[8]/D              7088.0942
    0:00:55   28999.5      0.01       1.0       0.0                           7130.5547
    0:00:56   29015.0      0.01       1.0       0.0                           7154.6929
    0:00:56   29015.0      0.01       1.0       0.0                           7154.6929
    0:00:56   28854.8      0.02       1.0       0.0                           6851.8159
    0:00:56   28854.8      0.02       1.0       0.0                           6851.8159
    0:00:57   29335.3      0.02       1.2       0.0                           7478.3076
    0:00:57   29335.3      0.02       1.2       0.0                           7478.3076
    0:00:57   29358.6      0.02       1.1       0.0                           7516.3799
    0:00:57   29358.6      0.02       1.1       0.0                           7516.3799
    0:00:57   29509.6      0.02       0.2       0.0                           7718.9263
    0:00:57   29509.6      0.02       0.2       0.0                           7718.9263
    0:00:58   29542.8      0.00       0.0       0.0                           7842.8760
    0:00:58   29542.8      0.00       0.0       0.0                           7842.8760
    0:00:58   29542.8      0.00       0.0       0.0                           7842.8760
    0:00:58   29542.8      0.00       0.0       0.0                           7842.8760
    0:00:58   29542.8      0.00       0.0       0.0                           7842.8760
    0:00:58   29542.8      0.00       0.0       0.0                           7842.8760
    0:00:58   29542.8      0.00       0.0       0.0                           7842.8760
    0:00:58   29542.8      0.00       0.0       0.0                           7842.8760
    0:00:58   29542.8      0.00       0.0       0.0                           7842.8760
    0:00:58   29542.8      0.00       0.0       0.0                           7842.8760
    0:00:58   29542.8      0.00       0.0       0.0                           7842.8760

                                  TOTAL                                                
   ELAPSED            WORST NEG   SETUP    DESIGN                              LEAKAGE 
    TIME      AREA      SLACK     COST    RULE COST         ENDPOINT            POWER  
  --------- --------- --------- --------- --------- ------------------------- ---------
    0:00:58   29506.8      0.05       0.2       0.0                           7842.9375
    0:00:59   28614.9      0.00       0.0       0.0                           7019.2471
    0:00:59   28602.2      0.00       0.0       0.0                           7002.4805
    0:00:59   28602.2      0.00       0.0       0.0                           7002.4805
    0:01:00   28504.8      0.00       0.0       0.0                           6694.8877

  Beginning Delay Optimization HSVT Pass
  --------------------------------------
    0:01:03   28504.8      0.00       0.0       0.0                           6694.8877
    0:01:03   28504.8      0.00       0.0       0.0                           6694.8877
    0:01:03   28504.8      0.00       0.0       0.0                           6694.8877
    0:01:03   28504.8      0.00       0.0       0.0                           6694.8877
    0:01:08   28466.0      0.00       0.0       0.0                           6525.2881
    0:01:08   28466.0      0.00       0.0       0.0                           6525.2881
    0:01:08   28466.0      0.00       0.0       0.0                           6525.2881
    0:01:08   28466.0      0.00       0.0       0.0                           6525.2881
    0:01:09   28073.0      0.00       0.0       0.0                           6191.8228
Loading db file '/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphp_150h/tcbn90lphpwc_ccs.db'
Loading db file '/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphphvt_150h/tcbn90lphphvtwc_ccs.db'
Loading db file '/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphplvt_150h/tcbn90lphplvtwc_ccs.db'


Note: Symbol # after min delay cost means estimated hold TNS across all active scenarios 


  Optimization Complete
  ---------------------
Warning: Design 'j1_wb' contains 1 high-fanout nets. A fanout number of 1000 will be used for delay calculations involving these nets. (TIM-134)
     Net 'dstack/clk_gate_mem_reg[30]/TE': 2197 load(s), 1 driver(s)
Information: State dependent leakage is now switched from off to on.
Information: Propagating switching activity (low effort zero delay simulation). (PWR-6)
1
#################################################################################
# Save Design after First Compile
#################################################################################
write -format ddc -hierarchy -output ${RESULTS_DIR}/${DCRM_COMPILE_ULTRA_DDC_OUTPUT_FILE}
Writing ddc file 'results/j1_wb.compile_ultra.ddc'.
1
if {$OPTIMIZATION_FLOW != "rtm_exp"} {


################################################################################
## RM+ Variable and Command Settings before incremental compile
################################################################################
if { $OPTIMIZATION_FLOW == "hplp" } {
    if {[shell_is_in_topographical_mode]} {
	# You can use placement aware multibit banking to group single-bit register cells that 
	# are physically near each other into a multibit registers
	identify_register_banks -output 	    ${RESULTS_DIR}/${DCRM_MULTIBIT_CREATE_REGISTER_BANK_FILE}
	source -echo -verbose ${RESULTS_DIR}/${DCRM_MULTIBIT_CREATE_REGISTER_BANK_FILE}
    }
}
if $DFT_COMPILE {
#################################################################################
# DFT Compiler Optimization Section
#################################################################################

    #############################################################################
    # Verilog Libraries for Test Design Rule Checking
    #############################################################################

    # For complex cells that do not have functional models in .lib format,
    # you can supply a list of TetraMAX-compatible Verilog libraries 
    # for test design rule checking.
    # Set the following variable in the dc_setup.tcl file:
    
    # set_app_var test_simulation_library <list of Verilog library files>

    #############################################################################
    # DFT Signal Type Definitions
    #
    # These are design-specific settings that should be modified.
    # The following are only examples and should not be used.
    #############################################################################

    # Define all global DFT signals in this section. If you define any Top-down DFT partitions, 
    # specify DFT signals in the DFT partitions section.
    # It is recommended that top-level test ports be defined as a part of the
    # RTL design and included in the netlist for floorplanning.

    # If you create test ports here and they are not in your floorplan, you should use
    # create_terminal for these additional test ports for topographical mode synthesis.

    if {[shell_is_in_topographical_mode]} {
      # create_terminal -layer "layer_name" -bounding_box {x1 y1 x2 y2} -port ScanPortName ... (repeat for each new test port)
    }

    # If you are using the internal pins flow, it is recommended to run the
    # change_names command before set_dft_signal to avoid problems after DFT insertion.
    # In this case, set_dft_signal pins should be based on pin names after change_names.
    #   -  Use the "-view existing_dft" for already connected DFT signals which must be 
    #      understood for the design to pass "dft_drc".
    #   -  Use the "-view spec" for DFT signals that DFT Compiler will use during
    #      "insert_dft" when making new scan connections.

    # change_names -rules verilog -hierarchy

    # set_dft_signal -view spec -type ScanDataOut -port SO
    # set_dft_signal -view spec -type ScanDataIn -port SI
    # set_dft_signal -view spec -type ScanEnable -port SCAN_ENABLE
    # set_dft_signal -view existing_dft -type ScanClock -port [list CLK] -timing {45 55}
    # set_dft_signal -view existing_dft -type Reset -port RESET -active 0

    puts "RM-Info: Sourcing script file [which ${DCRM_DFT_SIGNAL_SETUP_INPUT_FILE}]\n"
    source -echo -verbose ${DCRM_DFT_SIGNAL_SETUP_INPUT_FILE}

    #############################################################################
    # DFT for Clock Gating
    #
    # This section includes variables and commands used only when clock gating
    # has been performed in the design.
    #############################################################################

    # Use the following command to initialize clock gating cells for test that are
    # made transparent with a signal held constant for testing, e.g. of type 'Constant'.
    # The value set depends on the hierarchy depth of the clock-gating cells.
    # This setting is not needed where clock-gating cells are controlled with scan enable.

    # set_dft_drc_configuration -clock_gating_init_cycles 1

    # To specify a dedicated ScanEnable/TestMode signal to be used for clock gating,
    # use the "-usage clock_gating" option of the "set_dft_signal" command

    # set_dft_signal -view spec -type <ScanEnable|TestMode> -port <dedicated port> -usage clock_gating

    # You can specify the clock-gating connectivity of the ScanEnable/TestMode signals
    # after they are predefined with set_dft_signal -usage clock_gating

    # set_dft_connect <LABEL> -type clock_gating_control -source <DFT signal> [-target ...]

    #############################################################################
    # DFT Configuration
    #############################################################################

    # Preserve the design name when writing to the database during DFT insertion. 
    set_dft_insertion_configuration -preserve_design_name true

    # Do not perform synthesis optimization during DFT insertion. 
    set_dft_insertion_configuration -synthesis_optimization none

    # Multibit cell handling
    # Specify -preserve_multibit_segment to false to treat the cells inside a
    # multibit component as discrete sequential cells. This improves balancing
    # of scan chains.
    # Starting I-2013.12 release, the default setting is false
    # set_scan_configuration -preserve_multibit_segment false

    ## DFT Clock Mixing Specification
    # For a hierarchical flow, don't mix clocks at the block level:
    # set_scan_configuration -clock_mixing no_mix

    # For a top-down methodology clock mixing is recommended, if possible:
    set_scan_configuration -clock_mixing mix_clocks

    #############################################################################
    # DFT AutoFix Configuration
    #############################################################################

    # Please refer to the DFT Compiler, DFTMAX, and DFTMAX Ultra User Guide, Chapter 12,
    # "Advanced DFT Architecture Methodologies", "Using AutoFix" section.

    # Please refer to the dc.dft_autofix_config.tcl file included with the
    # Design Compiler Reference Methodology scripts for an example of a
    # design-specific AutoFix configuration.

    # Create a design-specific Autofix configuration file and uncomment the
    # following line to source this file.

    # source -echo -verbose ${DCRM_DFT_AUTOFIX_CONFIG_INPUT_FILE}

    #############################################################################
    # DFTMAX Compression Configuration 
    #############################################################################

    # To enable DFTMAX compression insertion regenerate a new set of scripts with default
    # configuration or uncomment the following command to enable it.

    # set_dft_configuration -scan_compression enable

    # DFTMAX Compression Options:
    # 
    #  -min_power true
    #     This specifies that compressor inputs are to be gated for functional power
    #     saving. 
    #     It also reduces glitching during functional and capture operations
    #     Default for -min_power option is false. Recommend that you set this to
    #     true. 
    #
    #  -xtolerance: value is set to tool default. 
    #     Specify "high" to generate DFTMAX compression architecture that has 100% X-tolerance.
    #
    #  -minimum_compression: tool default is a target compression ratio of 10,
    #
    #  -location <compressor_decompressor_location>
    #      Specifies the instance name in which the compressor and decompressor 
    #      will be instantiated.
    #      The default location is the top level of the current design.
    # 
    # For details on these and other DFTMAX compression options, please refer to the
    # DFT Compiler, DFTMAX, and DFTMAX Ultra User Guide, Chapter 18, "Using DFTMAX Compression"
    # and Chapter 20, "Managing X Values in Scan Compression".
     
    # set_scan_compression_configuration -xtolerance high -min_power true;

    # Use the following to define the test-mode signal to be used for DFTMAX  
    # compression. Ensure that that test mode signals to be used for clockgating have 
    # been configured with set_dft_signal -usage clock_gating.

    # set_dft_signal -view spec -type TestMode -port scan_compression_enable




    #############################################################################
    # DFT Pipelined Scan Data Configuration
    #############################################################################

    # Pipelined Scan Data Registers are commonly used with DFTMAX designs to
    # reduce the delay between top-level scan-in and scan-out ports and the
    # first and last element of the scan chain.

    # For details on Pipelined Scan Data please refer to DFT Compiler, DFTMAX, and DFTMAX Ultra
    # User Guide Chapter 21, "Advanced DFTMAX Compression", "Pipelined Scan Data" section.

    # Enabling automatic insertion of Pipelined Scan Data registers

    # set_dft_configuration -pipeline_scan_data enable

    # Controlling Automatic insertion of Pipelined Scan Data Registers

    # Use set_pipeline_scan_data_configuration to control how Pipelined Scan Data Registers 
    # should be inserted

    # Options:
    #  -head_pipeline_clock  <name of clock for head pipeline registers>
    #  -tail_pipeline_clock  <name of clock for tail pipeline registers>
    #  -head_pipeline_stages <desired number of head pipeline stages>
    #  -tail_pipeline_stages <desired number of tail pipeline stages>

    # Note: No scan clock signal can be shared with the Pipelined Scan Data Register clock

    # set_pipeline_scan_data_configuration -head_pipeline_clock <clock_name>     #   -tail_pipeline_clock <clock_name>     #   -head_pipeline_stages <x>     #   -tail_pipeline_stages <y>

    #############################################################################
    # DFT Additional Setup
    #############################################################################

    # Add any additional design-specific DFT constraints here

    #############################################################################
    # Defining Multiple Test modes
    #############################################################################
    
    # Use the define_test_mode command to define additional test modes that you wish to build.
    #
    # If you have enabled DFTMAX or DFTMAX Ultra Compression, the tool will build two test modes by 
    # default: ScanCompression_mode and Internal_scan. 
    #
    # If you wish to override the default test modes, you need to define the purpose of that test mode, 
    # then use the -base_mode and -test_mode options of set_scan_compression_configuration or 
    # set_streaming_compression_configuration command to define the correspondence between the two modes.
    #  
    # Design Compiler shell switches to that test mode after a define_test_mode command.
    #
    ###########################################################################
    # Defining DFT partitions
    ###########################################################################
    # Use the define_dft_partition command to define a set of clock domains, design references,
    # hierarchical cells, or sequential leaf cells that you can specify scan and compression configuration.
    # Then use the current_dft_partition command to set the current partition, then apply one or more
    # supported test configuration commands to configure scan for that partition.
    # Define any partition specific DFT signals in this section.
    #
    # Be sure to define any global scan and compression configuration and signals before define_dft_partition command.
    #
    # Please refer to the DFT Compiler, DFTMAX, and DFTMAX Ultra User Guide, Chapter 18,
    # "Using DFTMAX Compression", "Top-Down Flat Compressed Scan Flow with Partitions" section.
    #
    # define_dft_partition <partition_1>           #   -include <list_of_cells_or_references>     #   -clocks  <list of_clocks>
    #
    # define_dft_partition <partition_2>           #   -include <list_of_cells_or_references>     #   -clocks  <list of_clocks>
    #
    # current_dft_partition <partition_1>
    # <Scan and Compression configuration for partition_1>
    # If you have defined multiple test modes, you must use -test_mode option when defining DFT signals.
    # <DFT signals specific to partition_1>
    #
    # current_dft_partition <partition_2>
    # <Scan and Compression configuration for partition_2>
    # If you have defined multiple test modes, you must use -test_mode option when defining DFT signals.
    # <DFT signals specific to partition_2>
    
    #############################################################################
    # DFT Test Protocol Creation
    #############################################################################

    create_test_protocol

    #############################################################################
    # DFT Insertion
    #############################################################################

    # Use the -verbose version of dft_drc to assist in debugging if necessary
    
    dft_drc                                
    dft_drc -verbose                           > ${REPORTS_DIR}/${DCRM_DFT_DRC_CONFIGURED_VERBOSE_REPORT}
    report_scan_configuration                  > ${REPORTS_DIR}/${DCRM_DFT_SCAN_CONFIGURATION_REPORT}
    report_dft_insertion_configuration         > ${REPORTS_DIR}/${DCRM_DFT_PREVIEW_CONFIGURATION_REPORT}

    # Use the -show all version to preview_dft for more detailed report
    preview_dft                                > ${REPORTS_DIR}/${DCRM_DFT_PREVIEW_DFT_SUMMARY_REPORT}
    preview_dft -show all -test_points all     > ${REPORTS_DIR}/${DCRM_DFT_PREVIEW_DFT_ALL_REPORT}

    insert_dft

    #################################################################################
    # Re-create Default Path Groups
    #
    # In case of ports being created during insert_dft they need to be added
    # to those path groups.
    # Separating these paths can help improve optimization.
    #################################################################################
    
    set ports_clock_root [filter_collection [get_attribute [get_clocks] sources] object_class==port]
    group_path -name REGOUT -to [all_outputs]
    group_path -name REGIN -from [remove_from_collection [all_inputs] ${ports_clock_root}]
    group_path -name FEEDTHROUGH -from [remove_from_collection [all_inputs] ${ports_clock_root}] -to [all_outputs]
}

################################################################################
## RM+ Variable and Command Settings before incremental compile
################################################################################
if { $OPTIMIZATION_FLOW == "hplp" } {
  # Creating path groups to reduce TNS
 create_auto_path_groups -mode mapped
}
if { (${OPTIMIZATION_FLOW} == "hc") || (${OPTIMIZATION_FLOW} == "hplp") } {
    if {[shell_is_in_topographical_mode]} {

	# Enable congestion-driven  placement  in incremental compile to improve congestion    
	# while preserving quality of results
	set_app_var spg_congestion_placement_in_incremental_compile true
    }
}

if {[file exists [which ${LIBRARY_DONT_USE_PRE_INCR_COMPILE_LIST}]]} {
  puts "RM-Info: Sourcing script file [which ${LIBRARY_DONT_USE_PRE_INCR_COMPILE_LIST}]\n"
  source -echo -verbose $LIBRARY_DONT_USE_PRE_INCR_COMPILE_LIST
}

#########################################################################
# Incremental compile is required if netlist and/or constraints are 
# changed after first compile
# Example: DFT insertion, Placement aware multibit banking etc.       
# Incremental compile is also recommended for final QoR signoff as well
#########################################################################   

compile_ultra -incremental -scan

################################################################################
# Remove the path groups generated by create_path_groups command. 
# This does not remove user created path groups
################################################################################
if { $OPTIMIZATION_FLOW == "hplp" } {
    remove_auto_path_groups
}
#################################################################################
# High-effort area optimization
#
# optimize_netlist -area command, was introduced in I-2013.12 release to improve
# area of gate-level netlists. The command performs monotonic gate-to-gate 
# optimization on mapped designs, thus improving area without degrading timing or
# leakage. 
#################################################################################

optimize_netlist -area
}
INFO:    Saving user path groups to auto_path_groups.user_path_groups.tcl...
INFO:    User path groups saved
INFO:    set allRegisters [all_registers]
INFO:    Collecting hierarchies with timing violations...
Information: Changed wire load model for 'j1_wb' from 'TSMC16K_Lowk_Conservative' to 'TSMC8K_Lowk_Conservative'. (OPT-170)
Information: Updating design information... (UID-85)
INFO:    Collected 0 hierarchies with timing violations
INFO:    Creating path groups for hierarchies with timing violations...
INFO:    Number of reg path groups created: 0
INFO:    Creating macro path groups...
INFO:    No macro found, skipping...
INFO:    Creating ICG path groups...
INFO:    group_path -name synopsys_pg_to_ICGs -to [get_cells -hier -filter "full_name=~*latch || full_name=~*u_clkgate && defined(clock_gating_integrated_cell)"] -priority 1
INFO:    Number of ICG path groups created: 1
INFO:    Creating IO path groups...
INFO:    group_path -name synopsys_pg_inputs -from [ remove_from_collection [all_inputs] [get_ports [get_attribute [get_clocks -filter defined(sources)] sources]] ]
INFO:    group_path -name synopsys_pg_outputs -to [all_outputs]
INFO:    group_path -name synopsys_pg_feedthrough -from [ remove_from_collection [all_inputs] [get_ports [get_attribute [get_clocks -filter defined(sources)] sources]] ] -to [all_outputs]
INFO:    Number of IO path groups created: 3
INFO:    Total number of path groups created: 4
Information: Starting from 2013.12 release, constant propagation is enabled even when boundary optimization is disabled. (OPT-1318)
Information: Performing power optimization. (PWR-850)
Alib files are up-to-date.
Information: Running optimization using a maximum of 4 cores. (OPT-1500)
Information: Choosing a test methodology will restrict the optimization of sequential cells. (UIO-12)

Information: There are 3 potential problems in your design. Please run 'check_design' for more information. (LINT-99)


Loaded alib file '/project/design/CCE4600/lib/alib-52/tcbn90lphpwc_ccs.db.alib'
Loaded alib file '/project/design/CCE4600/lib/alib-52/tcbn90lphphvtwc_ccs.db.alib'
Loaded alib file '/project/design/CCE4600/lib/alib-52/tcbn90lphplvtwc_ccs.db.alib'
Information: State dependent leakage is now switched from on to off.

  Beginning Pass 1 Mapping  (Incremental)
  ------------------------

  Updating timing information
Information: Updating design information... (UID-85)
Information: The library cell 'TIEL' in the library 'tcbn90lphpwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIEH' in the library 'tcbn90lphpwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIELHVT' in the library 'tcbn90lphphvtwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIEHHVT' in the library 'tcbn90lphphvtwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIELLVT' in the library 'tcbn90lphplvtwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIEHLVT' in the library 'tcbn90lphplvtwc_ccs' is not characterized for internal power. (PWR-536)
Information: The target library(s) contains cell(s), other than black boxes, that are not characterized for internal power. (PWR-24)
Information: Automatic shift-register identification is enabled for scan. Not all registers will be scan-replaced. (OPT-467)

                                  TOTAL                                                
   ELAPSED            WORST NEG   SETUP    DESIGN                              LEAKAGE 
    TIME      AREA      SLACK     COST    RULE COST         ENDPOINT            POWER  
  --------- --------- --------- --------- --------- ------------------------- ---------
    0:00:07   28073.0      0.00       0.0       0.0                           6191.8228
    0:00:07   28073.0      0.00       0.0       0.0                           6191.8228

  Beginning Mapping Optimizations  (Ultra High effort)  (Incremental)
  -------------------------------

  Beginning Incremental Implementation Selection
  ----------------------------------------------

  Beginning Delay Optimization Phase
  ----------------------------------

                                  TOTAL                                                
   ELAPSED            WORST NEG   SETUP    DESIGN                              LEAKAGE 
    TIME      AREA      SLACK     COST    RULE COST         ENDPOINT            POWER  
  --------- --------- --------- --------- --------- ------------------------- ---------
    0:00:08   28070.9      0.00       0.0       0.0                           6191.7432
    0:00:08   28024.3      0.10       3.8       0.0                           6144.6621
    0:00:08   28018.7      0.10       3.2       0.0                           6300.6709
    0:00:09   28018.7      0.10       3.2       0.0                           6300.6709
    0:00:09   28182.4      0.00       0.0       0.0                           6598.2993
    0:00:09   28182.4      0.00       0.0       0.0                           6598.2993
    0:00:09   28183.8      0.00       0.0       0.0                           6610.5146

  Beginning Delay Optimization
  ----------------------------
    0:00:09   28183.8      0.00       0.0       0.0                           6610.5146
    0:00:09   28183.8      0.00       0.0       0.0                           6610.5146
    0:00:09   28183.8      0.00       0.0       0.0                           6610.5146
    0:00:09   28183.8      0.00       0.0       0.0                           6610.5146
    0:00:09   28183.8      0.00       0.0       0.0                           6610.5146
    0:00:11   28192.2      0.02       0.0       0.0                           6597.1772
    0:00:12   28192.2      0.00       0.0       0.0                           6587.1577
    0:00:12   28192.2      0.00       0.0       0.0                           6587.1577
    0:00:12   28166.1      0.00       0.0       0.0                           6471.8955
    0:00:12   28166.1      0.00       0.0       0.0                           6471.8955
    0:00:12   28168.3      0.00       0.0       0.0                           6492.2183
    0:00:12   28168.3      0.00       0.0       0.0                           6492.2183
    0:00:12   28168.3      0.00       0.0       0.0                           6492.2183
    0:00:12   28168.3      0.00       0.0       0.0                           6492.2183
    0:00:12   28168.3      0.00       0.0       0.0                           6492.2183
    0:00:12   28168.3      0.00       0.0       0.0                           6492.2183
    0:00:12   28168.3      0.00       0.0       0.0                           6492.2183
    0:00:12   28168.3      0.00       0.0       0.0                           6492.2183
    0:00:13   28154.1      0.00       0.0       0.0                           6447.9839
    0:00:13   28154.1      0.00       0.0       0.0                           6447.9839
    0:00:13   28154.1      0.00       0.0       0.0                           6447.9839
    0:00:13   28154.1      0.00       0.0       0.0                           6447.9839
    0:00:13   28154.1      0.00       0.0       0.0                           6447.9839
    0:00:13   28154.1      0.00       0.0       0.0                           6447.9839
    0:00:13   28154.1      0.00       0.0       0.0                           6447.9839
    0:00:13   28154.1      0.00       0.0       0.0                           6447.9839
    0:00:13   28154.1      0.00       0.0       0.0                           6447.9839
    0:00:13   28154.1      0.00       0.0       0.0                           6448.0625

                                  TOTAL                                                
   ELAPSED            WORST NEG   SETUP    DESIGN                              LEAKAGE 
    TIME      AREA      SLACK     COST    RULE COST         ENDPOINT            POWER  
  --------- --------- --------- --------- --------- ------------------------- ---------
    0:00:13   28154.1      0.00       0.0       0.0                           6448.0625
    0:00:13   28152.7      0.00       0.0       0.0                           6443.4805

  Beginning Delay Optimization HSVT Pass
  --------------------------------------
    0:00:17   28152.7      0.00       0.0       0.0                           6443.4805
    0:00:17   28152.7      0.00       0.0       0.0                           6443.4805
    0:00:17   28152.7      0.00       0.0       0.0                           6443.4805
    0:00:17   28152.7      0.00       0.0       0.0                           6443.4805
    0:00:22   27907.9      0.00       0.0       0.0                           6034.8740
    0:00:22   27907.9      0.00       0.0       0.0                           6034.8740
    0:00:23   27843.7      0.00       0.0       0.0                           5966.1006
Loading db file '/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphp_150h/tcbn90lphpwc_ccs.db'
Loading db file '/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphphvt_150h/tcbn90lphphvtwc_ccs.db'
Loading db file '/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphplvt_150h/tcbn90lphplvtwc_ccs.db'


Note: Symbol # after min delay cost means estimated hold TNS across all active scenarios 


  Optimization Complete
  ---------------------
Warning: Design 'j1_wb' contains 1 high-fanout nets. A fanout number of 1000 will be used for delay calculations involving these nets. (TIM-134)
     Net 'dstack/clk_gate_mem_reg[29]/TE': 2197 load(s), 1 driver(s)
Information: State dependent leakage is now switched from off to on.
Information: Propagating switching activity (low effort zero delay simulation). (PWR-6)
INFO:    remove_path_group synopsys_pg_to_ICGs
INFO:    remove_path_group synopsys_pg_outputs
INFO:    remove_path_group synopsys_pg_inputs
INFO:    remove_path_group synopsys_pg_feedthrough
INFO:    Number of path groups removed: 4
INFO:    Restoring user path groups from auto_path_groups.user_path_groups.tcl...
Information: Performing power optimization. (PWR-850)
Alib files are up-to-date.
Information: Running optimization using a maximum of 4 cores. (OPT-1500)

Information: There are 3 potential problems in your design. Please run 'check_design' for more information. (LINT-99)



  Updating timing information
Information: The library cell 'TIEL' in the library 'tcbn90lphpwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIEH' in the library 'tcbn90lphpwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIELHVT' in the library 'tcbn90lphphvtwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIEHHVT' in the library 'tcbn90lphphvtwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIELLVT' in the library 'tcbn90lphplvtwc_ccs' is not characterized for internal power. (PWR-536)
Information: The library cell 'TIEHLVT' in the library 'tcbn90lphplvtwc_ccs' is not characterized for internal power. (PWR-536)
Information: The target library(s) contains cell(s), other than black boxes, that are not characterized for internal power. (PWR-24)


  Beginning Area Optimization
  -----------------------------

                                  TOTAL                                                
   ELAPSED            WORST NEG   SETUP    DESIGN                              LEAKAGE 
    TIME      AREA      SLACK     COST    RULE COST         ENDPOINT            POWER  
  --------- --------- --------- --------- --------- ------------------------- ---------
    0:00:04   27843.7      0.00       0.0       0.0                           5966.1006
    0:00:06   27540.3      0.00       0.0       0.0                           5815.0254
Loading db file '/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphp_150h/tcbn90lphpwc_ccs.db'
Loading db file '/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphphvt_150h/tcbn90lphphvtwc_ccs.db'
Loading db file '/project/design/CCE4600/lib/TSMCHOME/digital/Front_End/timing_power_noise/CCS/tcbn90lphplvt_150h/tcbn90lphplvtwc_ccs.db'


Note: Symbol # after min delay cost means estimated hold TNS across all active scenarios 


  Optimization Complete
  ---------------------
Warning: Design 'j1_wb' contains 1 high-fanout nets. A fanout number of 1000 will be used for delay calculations involving these nets. (TIM-134)
     Net 'dstack/clk_gate_mem_reg[29]/TE': 2197 load(s), 1 driver(s)
1
#################################################################################
# Write Out Final Design and Reports
#
#        .ddc:   Recommended binary format used for subsequent Design Compiler sessions
#    Milkyway:   Recommended binary format for IC Compiler
#        .v  :   Verilog netlist for ASCII flow (Formality, PrimeTime, VCS)
#       .spef:   Topographical mode parasitics for PrimeTime
#        .sdf:   SDF backannotated topographical mode timing for PrimeTime
#        .sdc:   SDC constraints for ASCII flow
#
#################################################################################
change_names -rules verilog -hierarchy
Warning: The specified replacement character (_) is conflicting with the specified allowed or restricted character.   (UCN-4)
1
# write_icc2_files -force  -output ${RESULTS_DIR}/${DCRM_FINAL_DESIGN_ICC2}
if $DFT_COMPILE {
    #############################################################################
    # DFT Write out Test Protocols and Reports
    #############################################################################

    # write_scan_def adds SCANDEF information to the design database in memory, so 
    # this command must be performed prior to writing out the design database 
    # containing binary SCANDEF.

    write_scan_def -output ${RESULTS_DIR}/${DCRM_DFT_FINAL_SCANDEF_OUTPUT_FILE}
    check_scan_def > ${REPORTS_DIR}/${DCRM_DFT_FINAL_CHECK_SCAN_DEF_REPORT}
    write_test_model -format ctl -output ${RESULTS_DIR}/${DCRM_DFT_FINAL_CTL_OUTPUT_FILE}

    report_dft_signal > ${REPORTS_DIR}/${DCRM_DFT_FINAL_DFT_SIGNALS_REPORT}

    # DFT outputs for standard scan mode

    write_test_protocol -test_mode Internal_scan -output ${RESULTS_DIR}/${DCRM_DFT_FINAL_PROTOCOL_OUTPUT_FILE}
    current_test_mode Internal_scan
    report_scan_path > ${REPORTS_DIR}/${DCRM_DFT_FINAL_SCAN_PATH_REPORT}
    dft_drc
    dft_drc -verbose > ${REPORTS_DIR}/${DCRM_DFT_DRC_FINAL_REPORT}

    # DFT outputs for compressed scan mode

    # write_test_protocol -test_mode ScanCompression_mode -output ${RESULTS_DIR}/${DCRM_DFT_FINAL_SCAN_COMPR_PROTOCOL_OUTPUT_FILE}
    # current_test_mode ScanCompression_mode
    # report_scan_path > ${REPORTS_DIR}/${DCRM_DFT_FINAL_SCAN_COMPR_SCAN_PATH_REPORT}
    # dft_drc 
    # dft_drc -verbose > ${REPORTS_DIR}/${DCRM_DFT_DRC_FINAL_SCAN_COMPR_REPORT}
}
#################################################################################
# Write out Design
#################################################################################
write -format verilog -hierarchy -output ${RESULTS_DIR}/${DCRM_FINAL_VERILOG_OUTPUT_FILE}
Writing verilog file '/home/CC/bbeuster/Projects/github.com/pbing/J1_WB/syn/results/j1_wb.mapped.v'.
1
write -format ddc     -hierarchy -output ${RESULTS_DIR}/${DCRM_FINAL_DDC_OUTPUT_FILE}
Writing ddc file 'results/j1_wb.mapped.ddc'.
1
# Write and close SVF file and make it available for immediate use
set_svf -off
1
#################################################################################
# Write out Design Data
#################################################################################
if {[shell_is_in_topographical_mode]} {

  # Note: A secondary floorplan file ${DCRM_DCT_FINAL_FLOORPLAN_OUTPUT_FILE}.objects
  #       might also be written to capture physical-only objects in the design.
  #       This file should be read in before reading the main floorplan file.

  write_floorplan -all ${RESULTS_DIR}/${DCRM_DCT_FINAL_FLOORPLAN_OUTPUT_FILE}

  # Write parasitics data from Design Compiler Topographical placement for static timing analysis
  write_parasitics -output ${RESULTS_DIR}/${DCRM_DCT_FINAL_SPEF_OUTPUT_FILE}

  # Write SDF backannotation data from Design Compiler Topographical placement for static timing analysis
  write_sdf ${RESULTS_DIR}/${DCRM_DCT_FINAL_SDF_OUTPUT_FILE}

  # Do not write out net RC info into SDC
  set_app_var write_sdc_output_lumped_net_capacitance false
  set_app_var write_sdc_output_net_resistance false
}
write_sdc -nosplit ${RESULTS_DIR}/${DCRM_FINAL_SDC_OUTPUT_FILE}
1
# If SAIF is used, write out SAIF name mapping file for PrimeTime-PX
# saif_map -type ptpx -write_map ${RESULTS_DIR}/${DESIGN_NAME}.mapped.SAIF.namemap
#################################################################################
# Generate Final Reports
#################################################################################
if { $OPTIMIZATION_FLOW  == "rtm_exp"} {
  set_host_options -max_cores 8
  update_timing

  parallel_execute [list   "report_qor > ${REPORTS_DIR}/${DCRM_FINAL_QOR_REPORT}"   "report_timing -transition_time -nets -attributes -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_TIMING_REPORT}"   "report_area -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_AREA_REPORT}"   "report_clock_gating -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_CLOCK_GATING_REPORT}"   ]

} else {
report_qor > ${REPORTS_DIR}/${DCRM_FINAL_QOR_REPORT}

report_timing -transition_time -nets -attributes -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_TIMING_REPORT}

if {[shell_is_in_topographical_mode]} {
  report_area -physical -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_AREA_REPORT}
} else {
  report_area -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_AREA_REPORT}
}
report_area -designware  > ${REPORTS_DIR}/${DCRM_FINAL_DESIGNWARE_AREA_REPORT}
report_resources -hierarchy > ${REPORTS_DIR}/${DCRM_FINAL_RESOURCES_REPORT}
report_clock_gating -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_CLOCK_GATING_REPORT}
}
# Create a QoR snapshot of timing, physical, constraints, clock, power data, and routing on 
# active scenarios and stores it in the location  specified  by  the icc_snapshot_storage_location 
# variable. 
if {[shell_is_in_topographical_mode]} {
  set icc_snapshot_storage_location ${REPORTS_DIR}/${DCRM_DCT_FINAL_QOR_SNAPSHOT_FOLDER}
  create_qor_snapshot -name ${DCRM_DCT_FINAL_QOR_SNAPSHOT_REPORT} > ${REPORTS_DIR}/${DCRM_DCT_FINAL_QOR_SNAPSHOT_REPORT}
}
# Uncomment the next line to report all the multibit registers and the banking ratio in the design
redirect ${REPORTS_DIR}/${DCRM_MULTIBIT_BANKING_REPORT} {report_multibit_banking -nosplit }
# Use SAIF file for power analysis
# read_saif -auto_map_names -input ${DESIGN_NAME}.saif -instance < DESIGN_INSTANCE > -verbose
report_power -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_POWER_REPORT}
report_clock_gating -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_CLOCK_GATING_REPORT}
# Uncomment the next line if you include the -self_gating to the compile_ultra command
# to report the XOR Self Gating information.
# report_self_gating  -nosplit > ${REPORTS_DIR}/${DCRM_FINAL_SELF_GATING_REPORT}
# Uncomment the next line to reports the number, area, and  percentage  of cells 
# for each threshold voltage group in the design.
# report_threshold_voltage_group -nosplit > ${REPORTS_DIR}/${DCRM_THRESHOLD_VOLTAGE_GROUP_REPORT}
if {[shell_is_in_topographical_mode]} {
  # report_congestion (topographical mode only) uses zroute for estimating and reporting 
  # routing related congestion which improves the congestion correlation with IC Compiler.
  # Design Compiler Topographical supports create_route_guide command to be consistent with IC
  # Compiler after topographical mode synthesis.
  # Those commands require a license for Design Compiler Graphical.

  report_congestion > ${REPORTS_DIR}/${DCRM_DCT_FINAL_CONGESTION_REPORT}

  # Use the following to generate and write out a congestion map from batch mode
  # This requires a GUI session to be temporarily opened and closed so a valid DISPLAY
  # must be set in your UNIX environment.

  if {[info exists env(DISPLAY)]} {
    gui_start

    # Create a layout window
    set MyLayout [gui_create_window -type LayoutWindow]

    # Build congestion map in case report_congestion was not previously run
    report_congestion -build_map

    # Display congestion map in layout window
    gui_show_map -map "Global Route Congestion" -show true

    # Zoom full to display complete floorplan
    gui_zoom -window [gui_get_current_window -view] -full

    # Write the congestion map out to an image file
    # You can specify the output image type with -format png | xpm | jpg | bmp

    # The following saves only the congestion map without the legends
    gui_write_window_image -format png -file ${REPORTS_DIR}/${DCRM_DCT_FINAL_CONGESTION_MAP_OUTPUT_FILE}

    # The following saves the entire congestion map layout window with the legends
    gui_write_window_image -window ${MyLayout} -format png -file ${REPORTS_DIR}/${DCRM_DCT_FINAL_CONGESTION_MAP_WINDOW_OUTPUT_FILE}

    gui_stop
  } else {
    puts "Information: The DISPLAY environment variable is not set. Congestion map generation has been skipped."
  }
}
#################################################################################
# Write out Milkyway Design for Top-Down Flow
#
# This should be the last step in the script
#################################################################################
if {[shell_is_in_topographical_mode]} {
  # write_milkyway uses mw_design_library variable from dc_setup.tcl
  write_milkyway -overwrite -output ${DCRM_FINAL_MW_CEL_NAME}
}
exit

Thank you...
